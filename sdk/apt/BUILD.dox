/**

\page BUILD BUILD

<h1>File Structure</h1>

The APT source code is laid out into two main folders. There is an "external" folder
for tightly coupled source code used by APT. For example the <a href="http://www.robertnz.net/nm_intro.htm">
Newmat</a> matrix library is included under the external folder. You do not need to build these external 
components separately. They are handled by the APT Windows and *NIX build systems outlined below. 

There is a second directory, "sdk", which contains the source code for APT. Under
"sdk" the software is loosely grouped by function. Some specific sub directories include:

    - algorithm: Various implementations of specific numverical methods.
	- apt: This folder contains misc files related to building the APT distribution. Of 
		particular note is that the MS Visual Studio 2008 APT solution file is in this
		folder. Various doxygen files (.dox) are also present and used to create the
		various html documentation for APT.
    - birdseed: Method for genotype calling on WGSA arrays developed in collaboration with
        The Broad Institute.
    - braodutil: Various utility code used by birdseed.
	- build: This folder contains configuration information for the makefile *NIX build
		system. If your having trouble building APT on a particular platform, the likely
		culprit is that one or more of the files in this folder need to be tweaked
		for your system. 
    - calvin_files: Various parts of the Fusion SDK including AGCC file parsers.
	- chipstream: The chipstream code base provides the foundation for multichip 
		analysis in APT. The apt-probeset-summarize and apt-probeset-genotype are applications
		built on the chipstream architecture.
	- dabg: Detected Above BackGround (DABG) is one method for generating detection
		p-values from expression arrays. It was developed for use with the various
		Affymetrix Exon array offerings.
	- dm: DM is the genotype calling algorithm used for 100K Mapping Arrays. It is
		also used to generate genotype calls to seed the BRLMM method.
	- dox: Doxygen generated documentation for APT users and developers
	- file: Source code for accessing various Affymetrix file formats.
    - label: Genotype calling method for WGSA arrays. Part of BRLMM et al.
	- mas5: Implementation of MAS5 used by apt-probeset-summarize
	- mas5-stat: Original MAS5 implementation, parts of which are used by apt-probeset-summarize
	- midas: An alternative splicing detection method implemented for use with
		Affymetrix Exon array data.
	- normalization: Implementation of quantile and linear scaling normalization methods.
	- plier: Implementation of the PLIER method for signal estimation from expression array data.
	- portability: Various utility code related to portability between various *NIX and windows systems.
    - rawq: Code for computing the RAWQ value generated by MAS5.
    - regression-data: Stub folder for the regression data. Under *NIX
        build system a symlink will be created here to the actual location
        specified in the configure script. Under windows, you will need
        to copy the regression data into this folder.
	- rma: Implementation of Terry Speed's RMA method for signal estimation
	- stats: Various statistical methods
	- util: Various bits of utility code
	- util-win: Various bits of utility code for GUIs

<h1>*NIX Makefile Builds</h1>

<h2>Prerequisites</h2>
	- GNU make-3.80 (or later)
		- For OS-X and Cygwin, 3.81 or later is required. 3.80
		  will return an error about virtual memory being
		  exhausted.

<h2>Build Synopsis</h2>
\verbatim
	cd sdk
	./configure --prefix=/usr/local/apt-\aptversion \
                --regression-data=/location/of/regression/data
	make
	make check
	make regression
	make install
\endverbatim

<h2>Build Notes and Details</h2>
	- Run "./configure --help" to see the options you can set;
	- Variables which start with "sdk_" are intended for the
	  user to set.  Variables which start with "m2_" should be
	  internal to the makefiles.  Variables and targets which
	  start with an underscore should reference stuff in the
	  current directory only.  Targets without the leading
	  underscore are recursive.  Variables of note are:
		- sdk_subdirs: directories to descend into (defaults to directories with a Makefile)
		- sdk_exe: programs to build (list of programs to generate default build rules for.)
		- sdk_cppunit_exe: cppunit programs
		- sdk_cpp_ignore: *.cpp which should be left alone
		- sdk_cpp_cflags: flags for compiling  (Add the '-I' or '-L' on paths)
		- sdk_cpp_lflags: flags for linking
	- To make sure the output goes to the correct places, use these 
	  variables instead of a hard coded path.
		- sdk_output
		- sdk_output_bin
	- To keep the sub-makefiles small, repeated text is kept in
	  "Makefile.defs".  "Makefile.post" is included near the end.
	  A typical makefile should look like "util/Makefile".
	  That makefile is commented for use as an example.  
	  (The others are not.)
	- Each phase of the build has a makefile target.  (Targets
	  which start with an underscore are "local" targets. They
	  wont recurse and are generally for internal use.) Each of
	  these sequencing target has a variable of the same
	  name. Append what needs to be completed on this phase to
	  the end of the variable.  
		- For example: the target "_build_exe" builds executables in
	  	  the current directory.  The variable "_build_exe" should
	  	  have the list of executables to be built. Append to it
	  	  with: "_build_exe+=${sdk_output_bin}/foo"
	- The build process runs in stages:
		- ./configure to set the output and install paths.  The
		  output paths will default.  The install paths will not.
		  (You can still run programs from the output dir.)
		- When "make" is run it will attempt to build all the
		  targets in the current directory first and then recurses
		  to the subdirectories.

<h1>Microsoft Visual Studio 2008 Builds</h1>

<h2>Prerequisites</h2>
	- Microsoft Visual Studio 2008 w/ VC++
	- Optional: CPPUnit (1.10.2) (if you want to run the unit test projects)
	- Optional: Doxygen (Version 1.4.6) (if you want to rebuild the documentation)
	- Optional: Graphviz (version 2.8) (if you want to rebuild the documentation)

<h2>Build Synopsis</h2>
    - Move the regression data into the sdk/regression-data folder.
	- Open sdk/apt/apt.sln file in MS Visual Studio 2008
	- Select the "Release" build target
    - Select the win32 or x64 platform
	- Select the individual project to build or rebuild the entire solution

<h2>Note on Regression Data</h2>
    It is highly recomended that you run the regression tests if you
    are building APT from source code. The regression data is available
    as a separate donwload. You should only use the regression data in
    that download for regression tests and not in production. 

    With the *NIX makefile build system, a symlink will be created
    by the "regression" target to the location specified when
    running the configure script. 

    Under Windows you will need to copy the regression test data into
    the sdk/regression-test folder. 

    Once the symlink is created (by make) or the test data copied
    over (manually on windows) then you should see some of the 
    following folders under sdk/regression-data/data:
        - lib
        - cel
        - chp
        - probeset-genotype
        - probeset-summarize

<b><pre>Affymetrix Power Tools (APT) Release \aptversion</pre></b>
*/
