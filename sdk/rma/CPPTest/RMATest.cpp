////////////////////////////////////////////////////////////////
//
// Copyright (C) 2005 Affymetrix, Inc.
//
// This program is free software; you can redistribute it and/or modify 
// it under the terms of the GNU General Public License (version 2) as 
// published by the Free Software Foundation.
// 
// This program is distributed in the hope that it will be useful, 
// but WITHOUT ANY WARRANTY; without even the implied warranty of 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License 
// along with this program;if not, write to the 
// 
// Free Software Foundation, Inc., 
// 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
////////////////////////////////////////////////////////////////

#include "rma/RMA.h"
//
#include <cppunit/CompilerOutputter.h>
#include <cppunit/TestCase.h>
#include <cppunit/XmlOutputter.h>
#include <cppunit/extensions/HelperMacros.h>
#include <cppunit/extensions/TestFactoryRegistry.h>
#include <cppunit/ui/text/TestRunner.h>
//
#include <cmath>
#include <cstring>
#include <string>
//
#define EVEN 10
#define ODD 11

double testData[11][12]  = { {1495.32,1750.07,1809.07,16.904,19.275,9.323,2.978,5.167,4.834,45.501,23.728,17.131},
                              {1207.07,1248.737,1072.404,16.129,6.898,20.334,3.814,3.831,5.135,28.41,68.57,40.61},
                              {1054.237,988.154,918.737,47.163,54.988,42.514,13.18,7.341,10.696,11.706,13.035,25.051},
                              {993.82,850.487,804.154,30.602,30.684,21.785,7.678,8.284,5.489,160.154,93.237,134.737},
                              {922.987,860.32,974.32,5.361,3.411,5.135,3.444,4.19,4.575,7.935,9.475,14.16},
                              {855.737,886.487,979.57,7.341,6.542,3.35,5.114,3.647,3.35,13.246,7.831,7.904},
                              {627.487,586.487,653.904,16.904,4.895,6.818,5.748,8.793,6.612,30.684,7.078,26.731},
                              {464.654,291.07,350.07,14.495,7.341,18.118,12.433,5.818,7.157,32.95,30.684,45.917},
                              {453.987,327.404,375.237,3.174,6.542,5.89,2.978,2.835,5.489,11.706,7.831,31.817},
                              {383.82,430.07,375.237,6.255,6.141,9.735,4.02,7.341,8.221,13.246,11.706,14.16},
                              {222.487,189.404,214.82,8.221,8.86,10.772,5.404,4.674,4.28,5.748,34.352,2.895}
  };

using namespace std;
/**
 * @class RMATest
 * @brief cppunit class for testing conversion functions.
 */
class RMATest : public CppUnit::TestFixture {



  CPPUNIT_TEST_SUITE( RMATest );
  CPPUNIT_TEST( testStats );
  CPPUNIT_TEST( testLinearInterp );
  CPPUNIT_TEST( testVectorMean );
  CPPUNIT_TEST( testVectorVariance );
  CPPUNIT_TEST( testVectorQuantile );
  CPPUNIT_TEST( testVectorIqr );
  CPPUNIT_TEST( testFindBandWidth );
  CPPUNIT_TEST( testVectorMin );
  CPPUNIT_TEST( testVectorMax );
  CPPUNIT_TEST( testModeOfData );
  CPPUNIT_TEST( testBgParam );
  CPPUNIT_TEST( testFft );
  CPPUNIT_TEST( testBackgroundCorrect );
  CPPUNIT_TEST( testMedianPolishPsetFromMatrix );
  CPPUNIT_TEST( testMedianPolishWithPrecomputedEffects );
  CPPUNIT_TEST_SUITE_END();

public:

  double **evenData;
  double **oddData;
  int oddRows, oddCols;
  int evenRows, evenCols;

  void setUp();
  void testStats();
  void testVectorMean();
  void testLinearInterp();
  void testVectorVariance();
  void testVectorQuantile();
  void testVectorIqr();
  void testFindBandWidth();
  void testVectorMin();
  void testVectorMax();
  void testFft();
  void testModeOfData();
  void testBackgroundCorrect();
  void testBgParam();
  void fillInDoubleVectorMatrix(vector< vector<float> > &matrix);
  void testMedianPolishPsetFromMatrix();
  void testMedianPolishWithPrecomputedEffects();
  static bool closeEnough(double d1, double d2, int digits=6);
  /* Big wad of normal test data. */
  double goldTestGauss[1024];
  vector<float> gaussDat;
  
};

bool RMATest::closeEnough(double d1, double d2, int digits) {
  double diff = fabs(d1 - d2);
  if(diff < 1 / (pow((double)10, digits)))
    return true;
  return false;
}

void RMATest::testLinearInterp() {
}

/** Fill in our data matrices. */
void RMATest::setUp() {
  int i = 0; int j = 0;
  double data[] = {0.88833743294498,0.362902628966034,-1.14882119854486,2.24612911337683,0.467992213193331,-0.672017222689416,-1.21993576494461,1.28414663035950,0.335518060477656,-1.21334017658665,0.244435784834407,0.749865317582638,0.608148736496486,1.14809251117349,0.627807720977234,-1.28778172126481,-2.08257398122189,-0.987087118967012,-1.35224819408654,0.623456515054564,-0.846529487491358,-1.14240426948970,0.0289269608543650,-0.0409569225728287,-1.0867638861876,0.674262116869376,0.589976244124301,-1.38978502821549,0.314007955250374,1.05624065231439,-0.273362014522765,1.39033953421047,0.84252461211371,-2.27936942476020,1.85967095995771,-0.610994523924839,-2.15809683238715,-1.30883379660073,1.23921586632899,0.131360183638560,-0.682823961624653,0.299103129865453,0.325703068534118,-0.376399164044748,-1.24009347144615,-0.587112797892998,0.504176615023175,-0.814974111622151,-0.545683833912562,0.842614915057126,-0.920045568384243,1.98478027033208,-0.96765811475927,0.53183501489885,0.00118114347609316,-1.40936950693520,-1.07345873308928,1.23000987877197,0.747114112916992,0.427097693247821,-0.70280044800075,-0.965604139663154,-0.00802332402955276,-1.58847072862999,-0.156848917101177,2.22689752970005,-1.67541030966988,-0.814167709640137,-1.15525126346076,0.239736860280681,0.213470595266455,0.811161657342959,0.135503126111188,0.856042879732269,2.34066532158871,0.956741161659631,-0.200789598003505,-0.7683955556049,-0.754220814744324,1.75733125654357,-0.692418040729189,1.54097337238118,0.364948960718927,0.285072504295207,-1.28373760504826,1.83941924379681,1.74100426566521,0.73212394388021,0.0253993269365404,0.34525473391801,-0.645525439393697,-0.738181494975671,-0.282599111034019,0.287353588981926,0.931968052885332,-0.928388232436173,1.17419833414653,0.323017469036033,-0.668978280393715,-0.282454006171302,-0.220992128072714,-0.316096361959500,-0.860653165749201,0.339832239416886,0.814657874236617,0.0390238817294812,0.103637040677177,1.13777477780995,-0.0257119965609288,0.762816277257642,0.00420702342899743,-0.95046055653523,-1.10147272171575,0.733845892010324,-1.40475833615004,0.748961241076664,-0.37209742294199,0.0408055328279824,-0.772052772659489,1.18115371259058,-0.725163471508331,0.659445862472908,0.216692298601603,0.460033589335863,2.14877352784320,-0.908462374043465,-1.39397816492198,-0.368945959856213,-0.92844698520746,-0.945880528335785,0.773628591293175,1.10818725569483,0.57073955765971,0.684049268540997,-1.63470554863476,1.48813992369782,-0.829182628087256,-0.472241801070557,1.13900914370877,-2.00766411618255,0.118094676611683,-0.108355557868136,-1.10861662704847,-1.11841045414271,-2.23379464311354,1.10070073605572,1.70212539819604,0.307817361239869,-0.398418745466946,-0.0537665299500715,0.0149852715448741,-1.43982516946873,0.695873103601844,-2.75378043987668,-1.72202571140404,-1.47977275324553,0.603645405373502,1.77831382351432,0.441202728754070,-0.940413291552041,-0.0652404749706306,0.127740644479200,-0.606793909447889,0.966951409192973,0.486336054731722,-0.460335243771631,-0.104342704531654,0.955957956708822,-1.36175765079374,1.33779839430183,1.99265767462957,-1.13466753315654,-0.335378235467939,-0.442158095433949,-0.49417819093551,-0.238736610690817,0.724606600336338,0.427657328644522,1.27428473288983,-0.893502041916656,0.194712982750155,0.486000686847161,2.03772467756985,1.29802791054244,0.663600672833918,0.253831650054494,0.164496131211270,1.79270195574228,-0.669210439795204,-1.83167915021816,0.691083720826684,0.00121228014431553,-0.0228458127893121,-1.16788646446440,0.33561386364206,0.867670038673064,0.151022871559928,-0.702879957988426,-0.777833685725688,-1.38120391912794,-0.466754949231057,-1.12421375829817,0.0126157038859565,-0.848207460872984,0.711728517046629,1.04197752786121,0.71346736956926,-3.00507984461892,-1.05697314576997,-0.912073853334232,0.200052883909826,-1.34478064643410,1.27391252341848,0.310718554694807,0.16925978476653,0.951364440310419,-1.11349698220624,0.103926984956261,-1.19455633877795,-0.632483037055314,-1.00903523904874,-1.19550004841008,0.345009605076668,0.969797192267572,-1.16739557270347,-0.257886397674656,-0.673151435534211,-0.776361662769503,1.18467163126420,-2.18374508213896,-0.666485201720811,-0.74791378332128,-0.0545266208564875,0.848483400827183,-1.23155657199593,-0.455017565249025,0.352519514814365,2.01553447669295,0.0102572145308461,-1.92710582645762,0.667684325277403,0.404720825421170,-0.470578767511308,0.81007638928692,0.241783405253439,-0.167643285797548,-0.719456780435852,0.272913258628876,1.03098629322348,0.123602838916597,0.664582257778641,1.48902758661726,0.453073666968674,-1.84793512663199,-1.87684637101376,-2.10960344278780,0.0103125512372137,1.87891360637236,2.54427964443786,1.01094614946757,0.307815624953990,0.780099225205744,0.0148066710443322,0.99089085388065,0.666017494634296,1.12702801613746,-1.0955468991425,-0.165168980810306,0.571484563555145,-1.45706746717456,0.679073445991345,0.72398441147699,-0.136976132428420,0.202667489037492,0.355870403007944,0.975057333110856,1.37705960494112,0.187076607638868,0.0694126407686558,-1.86380470599811,0.380661714363961,0.942204635566258,0.392337160913605,-0.592590050251898,-0.51261325516135,0.127696725991908,1.75773766587679,-1.12148213997134,0.98215277689491,-0.724829618860272,-0.957562217057557,-1.27387889236968,-2.83381222200222,0.288906896308690,-0.479884559057298,1.04707570854034,1.06391646437869,0.776567378696017,0.410316015434932,0.159817100521071,-0.243849775400698,-1.23703951706353,0.828805665851432,-0.205413222287230,-0.247553336543579,1.15194746997399,2.25845445871220,-0.0737543553073371,1.02694684484473,-0.0340233043804302,-0.710222574380513,0.513822571785733,0.282517603353487,1.16654398442196,-0.228078113369592,-1.97958416908958,1.41150095183144,0.553242723556219,-0.402197421140812,-1.47352098986685,-0.61696649922236,0.527173093029017,-0.954324980074997,-0.505289627622207,-0.291853896781586,0.30054124279615,0.3786749313954,-0.975073786805988,-1.93356653723147,1.17204383660052,-0.892601740440515,-1.19424072116797,0.384128995090647,0.406445035258041,-0.281138810511877,-0.187417448651576,0.708287048983291,0.437966107560305,0.500942823214984,-1.66908870964327,-0.115493539807855,0.0597068726835009,-1.47075794134807,1.11120374000189,0.545596069166126,1.11771747720591,1.01539102887773,-1.76731792119816,-0.405289930034993,-0.257862016940309,0.326193766703194,0.224535623649202,1.24397075103074,0.199004859965848,-1.84913955388987,0.191826051477241,-1.36063717814275,0.379167463627359,-0.967965735195353,-0.784585321635566,0.792647221365505,0.297684945105344,1.03634512522116,-1.83264055951205,0.504587488923243,1.19926715890085,1.01086138259899,0.113235310091863,-0.794493266141485,-0.110758710830954,-0.239395995005891,-0.221425802777061,0.404105048686887,0.137076731450476,-0.478096322934648,-0.736556769138908,0.271335036067815,-0.97322965864076,0.0699150590214126,-0.762961124559892,1.08137587286482,0.0334470049123532,0.254422058411612,-1.53150803879639,-1.02449228492499,0.877798705157966,-0.99734196955142,-1.18808755948367,-1.81043262837775,-1.23439531082018,0.254895515358125,0.459801205782596,0.0925445557534262,-1.71323909162489,-1.11315824252648,0.43224813811916,0.0253690536684029,-0.283887277306493,-1.05164076074319,0.954237878402513,-0.290904496334761,0.626921793420857,0.477061991724385,-0.505969918762288,-0.360608515678282,-0.863852045390266,-0.100905217591518,1.52138902981034,-0.188152517976341,0.236257262762374,-1.17410915414457,0.444646908112142,-0.881264957775898,-0.163353065842846,1.16008783543681,-0.518510379065394,-0.851869975522686,-1.41450170576671,0.240936823346703,0.658257735370539,3.30991356004049,-0.290996181545660,1.08337398926330,2.70485325148645,0.48706879122558,0.894477391797632,-0.317357709946251,0.76867242161491,0.134231549735483,2.04670563430604,-0.80116866475977,-0.99061442157376,1.37502518371106,-0.970967842072504,0.180638491076424,-0.289941587207532,-1.48915641656635,1.02711883256563,0.0781756632410355,0.636398481587827,-0.209005523505314,1.21612844722780,-1.00390359381228,-1.11023921836361,-0.0944670314537388,-2.94438198189215,-0.153778832861076,0.484116046219846,0.348637194715994,-1.14104101776581,1.05792718610685,-1.95476151370803,0.64870818196287,-1.00645445358564,-0.696402116965397,-0.814932411584766,1.09464710596676,0.0105979392902757,-0.230527208567892,-0.275534314578905,1.46215931758020,0.181241871001476,0.432057738090233,0.559258903757686,-1.15364046840204,-0.602124520982826,0.827375190906215,-2.35088299173827,-0.932476420062436,-0.788558760771146,-0.149986986778680,0.757776370223411,-0.92998957107409,0.376385387151235,0.961312134770113,-1.64868919235176,-1.06845823116709,0.812392744585643,-0.610746819247792,0.862088337338671,0.0604855832744864,0.60444126363768,0.202540650302954,0.258207328784105,0.460609741271423,-0.662596798424589,1.44215251155238,-1.29673112558881,1.7307929246921,0.609320616471635,0.732047508590155,-1.08092780570559,-0.349327832878368,0.0816101474631894,1.54658394636423,1.16412852077880,-0.982935448596862,-0.0990054094334628,-0.302164578636921,1.03390591584000,-0.337761898725213,-1.34104531845526,1.31100297454496,-1.61435446277529,-1.04276839253152,-0.276378708277139,-1.03356133727893,-0.235791894036882,0.126699975803071,0.179538893136202,0.148572733627831,-1.71543839173965,0.227143020974531,0.313653620205216,1.46281002587915,1.33814369697900,1.85977901051743,-0.449216149202073,0.339163316669491,-2.10133423090227,0.226814374075076,-0.571680168340756,2.42419023949185,-0.363810303791327,0.805230634139648,-0.91041600314373,1.51229845449624,0.334686355946733,-0.253405357296159,0.64888524677799,-0.602463726929813,0.298574323928688,0.261911943657505,0.171374104217866,0.358286160341471,0.672425024571416,0.0532842462828676,-0.708615412275184,0.0571699742098115,-0.812474068717583,0.941554399275006,-0.199088133344306,-0.701695065082752,-1.25021730913082,-2.16796577490859,1.99870400345682,-1.06060617451939,-0.118612563654400,1.17142599436018,-0.34138362866877,1.47465582619521,1.79298102244981,1.00010323698375,-0.727508088202071,-1.31340364942593,0.362853070165031,-1.17715983367932,1.35861416126916,-0.183950073241811,0.530515594688547,2.38608966150901,0.572589447448512,-0.788228261851349,-0.117946449402439,0.210595887403070,0.344238530263349,-0.462274359385121,1.00070797940208,-0.780511308843599,0.140439273338482,0.649156709289307,-0.41601661233814,-0.513466113786826,1.09635618317197,-0.85758446518415,-1.26505944593016,-0.100511820723677,1.44539501872435,-0.532021257090815,0.707220646044275,0.662332969697241,-0.956183574270411,0.247820729586396,0.964489603768178,-0.594339902971959,-0.804286467865695,-0.111341165566852,0.435156093504649,-0.490897376637302,-0.500078772304845,-1.28218486749342,0.561453214107734,0.504311888407288,-0.283649658249519,1.43448602968289,0.347471457449604,0.0343914874544389,-0.538500489018907,-0.125802808722232,0.668514215195642,0.890751003344477,-1.04463765448294,-0.823067072360596,-0.737615627698886,-2.25380210314121,-0.0520506311896024,1.86181559506282,-0.630786168747446,-1.54265680012950,0.413980894555253,1.09514853251417,0.237127557784913,0.296336078116605,-0.226019705591166,-0.612103492508236,-0.279954863920583,-1.48011142361302,-0.948690208050011,1.23084367536695,-1.79163155268975,0.570326267150232,0.474750032627788,-0.923848137810039,0.514471768966615,0.340148446020995,0.377591960479776,-2.14889694593982,0.296704053232188,0.106349320801634,-0.0986215393537345,-1.36123002343514,-0.34832711556622,0.271533870302774,0.967438613552788,-0.275948821161884,1.46947946027090,0.0395509058297332,-0.430085334052222,0.157759246325758,-1.36783772471582,-0.890895682039904,1.50947373280006,-0.710183151960924,0.00643563538027893,0.424718836040929,0.658890918556656,0.413891992834456,-2.38769822658423,1.47918465394106,-0.719206698576108,0.877203357474162,0.498583793928591,-1.5355699261359,0.182234272677054,-0.493782238532189,1.69990070920737,-0.348290324823934,-1.34264802314296,-0.343695007835003,-0.353972850267271,-0.0127472031227615,-0.845570541689803,0.454187151381132,-0.386843838852696,0.0227129134542560,-1.69833186186663,-0.263211780835724,-1.68073843703012,-1.83427784661760,0.450828527729504,-1.99650305833734,-0.319557692756141,-0.707166418811565,-1.70820456697846,-0.148714683078941,1.5006780579051,-0.674944738506117,-0.813010125464665,0.274484310906373,-0.035661833364002,-1.28822146497410,-0.877247176627184,0.0316337861494962,-1.64983885827171,-0.254550321273259,0.374712646111101,-0.430491086960829,0.801887009216978,-0.0936523845992477,-0.584005299840677,1.71136470996934,1.63007508026265,1.40782300605963,1.89124734066719,-0.584704484999213,-1.58125373825361,-1.51844099268459,-0.157333996353966,1.06496794710055,1.03786862108360,0.741858592521191,0.0319432636576521,-0.617512937317905,-0.96364835648801,-0.870439334650904,0.195768213423679,-0.880037125357988,0.168626059628559,-0.937860693254873,-2.99350745471216,-0.239215644898728,-0.484735949713573,0.175047888512534,-0.828858077553127,0.936230145262974,-0.0286806490984274,0.291506261054357,0.256622218418579,-0.0377017808441464,1.54738523635375,-0.126940852523424,1.24597212772995,-1.40356948142135,0.102430138123746,-0.774361330088931,1.89793838016659,0.599965210281568,-0.322462905279784,0.0187538290863314,0.842975742439155,-2.28403808469944,-2.05729203292026,-1.95810227571511,-2.04718326497981,0.480006779654105,-0.762175468249498,0.791959503852664,0.418085225688075,-1.37383547106123,-0.452211567507685,0.88195088926048,0.854239040997684,-1.30869952646332,-0.872077795898404,-0.679477904764815,3.32295727204258,1.13717695029807,-0.587187698204293,0.123428036991723,0.468837009323954,-0.369952741128924,-0.480412127075009,-1.87651154228543,-0.0340197579601604,-1.29887356359428,-0.514711821363126,-1.01013082664427,0.886218710055315,1.48346174980443,-1.69053019149342,-0.266025417490240,-0.510293686303487,0.535213094465785,1.14110995776587,0.76002219405945,-0.176133562690532,-0.723413382798163,-0.617162593356699,1.26389954939865,-1.41649882422950,0.0720368511874474,0.416919751337208,-0.560724049486239,1.32529141446172,-0.65463101985361,0.137790420274455,2.62886206142532,-0.311394222843519,1.23325426952168,-0.487904984006177,-1.43671541460668,0.387095342535223,-1.87920099970092,-1.42893239785365,-0.359402890453914,0.520796370602145,-0.810454380700292,0.66287109415165,-1.10349300074679,0.192651570130778,-0.410307634279553,-0.899643057944052,0.227313448335477,-0.565574460382412,0.418782151982765,-0.806859482395041,-0.118086151370947,-0.512331708888014,-0.409833505724651,0.807107276451535,-1.16165437296830,-0.826426046048932,0.101988783861529,0.668237051394534,-1.31236742603624,0.567218366176344,0.929507248550317,-1.23100726095370,-0.83655485448227,-1.02490045420257,1.63664656589357,0.743706012982183,0.276074563828129,-0.286273328930429,1.05132764646687,-0.154399788794592,-1.47629855669515,0.552896582607985,-0.743073103956396,1.68673895389871,0.823690978888485,-1.01442633966420,-0.757152489745416,2.01121954196550,-0.146020723434929,-0.140652656648248,-0.334602144361443,-1.00521210126808,-2.23121006886725,1.08794927300709,0.27973753471332,-0.71817700765167,-0.0703022907973728,0.698513048028327,-0.261230026007673,0.453803979325167,-1.08358870682050,-1.75129776280084,1.14154083538857,0.643074315947563,-0.525141902605791,1.44390838939543,-0.830186242785129,0.408929854050741,-1.49650574618403,1.48574660479799,-2.27805362228858,0.349411883064952,0.602460962613987,0.168200179168635,0.310283426999884,-0.660075284238304,0.503099649506486,0.263581363613276,2.89715494756836,1.56504002868411,0.895984528490476,0.548882805819046,-1.12049297213814,-0.913661943236589,2.23425610532834,0.634695098082508,-1.94189644493397,-0.78020871178961,-1.83297473587102,0.415431915075252,0.71874597499079,-0.246738031181371,0.869434837203124,0.134442280343586,-0.250614446948392,-0.843861524491995,-1.01751139602353,0.242672448627297,-1.27483368449342,-0.614309088603628,-0.232140701613937,0.367811961879039,-0.852427815964984,-1.15043083782463,-0.925158598985804,0.391748241655916,-0.59551519354019,0.538728275925367,-1.17658708132466,0.949497658108698,0.0662452539800808,-0.660955420830699,-0.381444260897881,1.40613300140400,-0.443758673185292,0.363283763696759,-2.11657902044264,-0.705920026290298,0.593880036188184,0.231061054228356,-0.485284342640773,-0.283699221030649,0.353045825989896,-1.87841188435968,1.04872433573531,1.76734521764687,0.7935436433037,-0.0521934060045429,-2.03023749690228,-0.0482416886183945,1.01554802956310,0.855642572207221,-2.33072552307240,2.23203764913498,1.85108912124736,-0.821107371936872,-0.597264156828637,-0.86906519245839,-0.53416600901516,0.073190236880799,-0.362566400050638,-0.491346395363588,0.947038659480389,-0.864710181296776,-0.181722373973336,0.179218903135235,-0.932063270520775,-0.524087028034613,-1.97763455850071,0.583973492370667,0.377763333182263,0.0295435250284629,-0.123134606562172,-2.26447145669745,-0.802378640067858,-1.62573680420685,-0.511411761876449,0.209694802859897,1.65085078446771,-1.64785747167647,0.347526996978602,-0.0386647252232800,0.266479923695181,-0.942044967003942,-0.70093663363642,0.416503894961887,0.703057198609305,0.593178075685402,2.96989748721332,-1.90243531187806,0.143541597613856,0.137193875380010,0.559482974204002,-0.570306097136789,0.505318828076153,0.600115481781241,-2.41945615336697,1.38722256319719,-0.279024990989781,1.75331061133227,0.192621358257660,1.43718770463411,0.840103242662286,0.567762108700982,-1.04726652379068,0.0919382072587096,-0.339876328541879,1.40439193373677,-1.20021810335516,2.58448736352947,-1.3033017423142,0.564807596820598,1.51834175758271,2.11141812253201,0.097970176556952,0.970495987372602,-2.01384513080894,1.66733405083587,1.62432687046886,-1.87917322699375,0.483861831307198,-0.26006408566111,0.329468028824221,-2.24323484540143,0.0209281607113661,-0.66120593206543,0.145693014464355,-1.00095468205748,0.751055181988368,-0.539098667468452,1.09306774625122,-0.190740937693038,0.593658503628587,0.109024872696284,-0.506379251410822,1.16462073338398,0.74179747427593,0.510368795822695,-0.611974857994457,-0.0189697518363036,0.668244895988743,-2.32505109360261,-1.16022823087035,-0.127286449786463,-0.607942800470363,0.061643176958421,-0.101647026838410,1.47014460068285,-0.703350789555362,0.729632115685303,2.22703870819163,0.444177669993539,-0.535746083257267,-0.263689891664909,1.2969337905346,0.816655504321561,0.229891166109218,-0.375399770946414,-0.956437864749453,-1.97472401318894,-0.768384053233287,-0.322539148107367,-1.41699512800511,1.62456578760495,-0.631975557357588,0.452633780015032,2.40454000603967,1.63936469681257};
  oddRows = oddCols = ODD;
  evenRows = evenCols = EVEN;
  oddData = new double *[ODD];
  for(i = 0; i < oddRows; i++) {
    oddData[i] = new double[ODD];
    for(j = 0; j < oddCols; j++) {
      oddData[i][j] = ODD - i - 1;
    }
  }
  evenData = new double *[EVEN];
  for(i = 0; i < evenRows; i++) {
    evenData[i] = new double[EVEN];
    for(j = 0; j < evenCols; j++) {
      evenData[i][j] = EVEN - i - 1;
    }
  }
  /* Set our vector of data. */
  gaussDat.clear();
  for(i = 0; i < 1024; i++) {
    goldTestGauss[i] = data[i];
    gaussDat.push_back(goldTestGauss[i]);
    
  }
}

void RMATest::testVectorMean() {
  double mean = 0;
  vector<float> column;
  RMA::columnToVector(evenData, evenRows, 1, column);
  mean = RMA::vectorMean(column);
  CPPUNIT_ASSERT( closeEnough(mean, 4.5) );

  column.clear();
  RMA::columnToVector(oddData, oddRows, 1, column);
  mean = RMA::vectorMean(column);
  CPPUNIT_ASSERT( closeEnough(mean, 5.0) );
}

void RMATest::testVectorVariance() {
  double variance = 0;
  vector<float> column;
  RMA::columnToVector(evenData, evenRows, 1, column);
  variance = RMA::vectorVariance(column);
  CPPUNIT_ASSERT( closeEnough(variance, 9.166667) );

  column.clear();
  RMA::columnToVector(oddData, oddRows, 1, column);
  variance = RMA::vectorVariance(column);
  CPPUNIT_ASSERT( closeEnough(variance, 11.0) );
}

void RMATest::testVectorQuantile() {
  double quantile = 0;
  vector<float> column;
  RMA::columnToVector(evenData, evenRows, 1, column);
  quantile = RMA::vectorQuantile(column, .25);
  CPPUNIT_ASSERT( closeEnough(quantile, 2.25) );
  quantile = RMA::vectorQuantile(column, .75);
  CPPUNIT_ASSERT( closeEnough(quantile, 6.75) );

  column.clear();
  RMA::columnToVector(oddData, oddRows, 1, column);
  quantile = RMA::vectorQuantile(column, .25);
  CPPUNIT_ASSERT( closeEnough(quantile, 2.5) );
  quantile = RMA::vectorQuantile(column, .75);
  CPPUNIT_ASSERT( closeEnough(quantile, 7.5) );
}

void RMATest::testVectorIqr() {
  double iqr = 0;
  vector<float> column;
  RMA::columnToVector(evenData, evenRows, 1, column);
  iqr = RMA::vectorIqr(column);
  CPPUNIT_ASSERT( closeEnough(iqr, 4.5) );

  column.clear();
  RMA::columnToVector(oddData, oddRows, 1, column);
  iqr = RMA::vectorIqr(column);
  CPPUNIT_ASSERT( closeEnough(iqr, 5) );
}
    
void RMATest::testFindBandWidth() {
  double bandWidth = 0;
  vector<float> column;
  RMA::columnToVector(evenData, evenRows, 1, column);
  bandWidth = RMA::findBandWidth(column);
  CPPUNIT_ASSERT( closeEnough(bandWidth, 1.719286) );

  column.clear();
  RMA::columnToVector(oddData, oddRows, 1, column);
  bandWidth = RMA::findBandWidth(column);
  CPPUNIT_ASSERT( closeEnough(bandWidth, 1.847823) );
}

void RMATest::testVectorMin() {
  double minimum = 0;
  vector<float> column;
  RMA::columnToVector(evenData, evenRows, 1, column);
  minimum = RMA::vectorMin(column);
  CPPUNIT_ASSERT( closeEnough(minimum, 0) );

  column.clear();
  RMA::columnToVector(oddData, oddRows, 1, column);
  minimum = RMA::vectorMin(column);
  CPPUNIT_ASSERT( closeEnough(minimum, 0) );
}

void RMATest::testVectorMax() {
  double maximum = 0;
  vector<float> column;
  RMA::columnToVector(evenData, evenRows, 1, column);
  maximum = RMA::vectorMax(column);
  CPPUNIT_ASSERT( closeEnough(maximum, 9) );

  column.clear();
  RMA::columnToVector(oddData, oddRows, 1, column);
  maximum = RMA::vectorMax(column);
  CPPUNIT_ASSERT( closeEnough(maximum, 10) );
}

void RMATest::fillInDoubleVectorMatrix(vector< vector<float> > &matrix) {
  int numRow = 11, numCol = 12;
  int rowIx = 0;
  int colIx = 0;
  for(rowIx = 0; rowIx < numRow; rowIx++) {
    matrix.push_back(vector<float>());
    for(colIx = 0; colIx < numCol; colIx++) {
      matrix[matrix.size() -1].push_back(testData[rowIx][colIx]);
    }
  }
}

/* 	The vectors of data gold[] and rowGold[] are the colEstimates and rowEstimates of  
	output of the call to the function void RMATest::testMedianPolishPsetFromMatrix().
	We now input the colEstimates as precomputedFeatureEffectes to the function
	void RMATest::testMedianPolishWithPrecomputedEffects and verify the output is the
	rowEstimates of the original function.
*/ 

void RMATest::testMedianPolishWithPrecomputedEffects() {
  vector< vector<float> > data;
  vector<float> precomputedFeatureEffects, rowEstimates;
  float rowGold[] = { 	4.4172864, 4.43508101, 4.47018623, 4.58209038, 
			3.13698483, 3.27226615, 3.83470631, 4.12667942, 
			3.02706861, 3.27641845, 3.33850312};

  float gold[] = { 	9.41705227, 9.30256367, 9.35293388, 3.49671268, 
			3.2721715, 3.68347406, 2.52305984, 2.317348, 
			2.63261795, 4.2899251, 3.98593855, 4.48021698 };

  fillInDoubleVectorMatrix(data);
  for(int i=0; i<12; i++)
    precomputedFeatureEffects.push_back(gold[i]); 

  RMA::medianPolishWithPrecomputedEffectsOnePass(data, data.size(), data[0].size(), precomputedFeatureEffects, rowEstimates); 
  for(int i = 0; i < rowEstimates.size(); i++) {
    CPPUNIT_ASSERT( closeEnough( rowEstimates[i], rowGold[i], 6 ) );
  }
}


  
void RMATest::testMedianPolishPsetFromMatrix() {
  vector< vector<float> > data;
  vector<float> colEstimates, rowEstimates;
  double rowGold[] = { 	4.4172864, 4.43508101, 4.47018623, 4.58209038, 
			3.13698483, 3.27226615, 3.83470631, 4.12667942, 
			3.02706861, 3.27641845, 3.33850312};

  double gold[] = { 	9.4171,9.3026,9.3529,3.4967,3.2722,
			3.6835, 2.5231, 2.3173, 2.6326, 
			4.2899,3.9859,4.4802};

  fillInDoubleVectorMatrix(data);

  RMA::medianPolishPsetFromMatrix(data, data.size(), data[0].size(), colEstimates, rowEstimates);
  for(int i = 0; i < colEstimates.size(); i++) {
    CPPUNIT_ASSERT( closeEnough( colEstimates[i], gold[i], 3 ) );
  }
  for(int i = 0; i < rowEstimates.size(); i++) {
    CPPUNIT_ASSERT( closeEnough( rowEstimates[i], rowGold[i], 3 ) );
  }
}

void RMATest::testBgParam() {
  double gold[] = {3.04743393238322,-0.0352978726152391,1.49083778699003};
  double mu = 0, sigma = 0, alpha = 0;
  RMA::estimateBgParam(gaussDat, &mu, &sigma, &alpha, 512);
  CPPUNIT_ASSERT( closeEnough( gold[1], mu ) );
  CPPUNIT_ASSERT( closeEnough( gold[0], alpha ) );
  CPPUNIT_ASSERT( closeEnough( gold[2], sigma ) );
}

void RMATest::testModeOfData() {
  /* Test case results for normally distributed data. */
  double mode = 0;
  mode = RMA::modeOfData(gaussDat, 512);
  CPPUNIT_ASSERT( closeEnough( 0.302393, mode) ); 
}

void RMATest::testBackgroundCorrect() {
  int i = 0;
  double gold[] = {0.341732107225046,0.31809733269004,0.26455394792972,0.420697837276563,0.322577833952361,0.279501158731381,0.262453671877764,0.361782065291433,0.316948762450742,0.262647131073635,0.313183567372484,0.335194289059306,0.328738965318684,0.354651318845014,0.329620643369410,0.260479240645717,0.23929567895364,0.269451265071865,0.258629139167676,0.329425120270459,0.273848861252111,0.264745033146784,0.30459906759996,0.301909151081356,0.266412950389737,0.331721572940689,0.327927836291621,0.257563348128080,0.316051983959269,0.349981626699043,0.293275523395197,0.367532640970805,0.339543197818879,0.234550526697967,0.39507290572332,0.281529928654304,0.237453100155728,0.259872315143296,0.359398318272491,0.308623813579733,0.279144749494051,0.31543335465801,0.316538978063512,0.289594566854920,0.261864087662540,0.282331485904988,0.324147818998044,0.274854845907396,0.283732245678664,0.339547486964282,0.271531977168484,0.403054217377535,0.27005115231736,0.325357476537078,0.303525746605991,0.257010591589726,0.266814751440143,0.358913456439198,0.335066737923365,0.320820418373028,0.278488173680586,0.270114718427298,0.303171242535924,0.252058448487862,0.297545144567451,0.419352531789809,0.249719570377787,0.274880645549846,0.264362733870502,0.312991583360948,0.311922453454249,0.338059572955049,0.308788686899120,0.340186394625340,0.427424712879056,0.345049269754,0.295921312066008,0.276352599953420,0.276811460460374,0.388753959922472,0.278829052387163,0.375981818949089,0.318183471674738,0.314853068013019,0.260596139892264,0.393807767531278,0.387762767909123,0.334373339736947,0.304462210513718,0.317356254373237,0.28037850917066,0.277332419529201,0.292941949533233,0.314947274922441,0.343841091135769,0.271271397574552,0.355999471829792,0.31642702389213,0.279601538680470,0.292947184109195,0.295180294629835,0.291738240776379,0.273400851471484,0.317129195914235,0.338224367904469,0.304991421783854,0.307524757507477,0.354121074215521,0.302492146511088,0.335795929069145,0.30364245591167,0.270584255716017,0.265970092975122,0.334452856616932,0.257140535066302,0.335152364426174,0.289746505374702,0.305060752750988,0.276234442795021,0.356360248909669,0.277756610055715,0.331048809023301,0.312053221365917,0.322234416216737,0.413965952714622,0.271894559904111,0.257444809995992,0.289857910992181,0.271269564135169,0.270726567190176,0.336299749653353,0.352608571859726,0.327073243245564,0.332167370331711,0.250809451039478,0.372978334288306,0.274401015274839,0.286247849982435,0.354184433523356,0.241150518182014,0.30809700171438,0.299356726170474,0.265755505771956,0.265461853873304,0.235633318353585,0.352227744709294,0.385420838600031,0.315794767203466,0.288819171396029,0.301420911552873,0.304058860163503,0.256155474025253,0.332707419242197,0.223821522462828,0.248482473922653,0.255042022542783,0.328537612581210,0.390034549081533,0.321424557922607,0.27089663182952,0.300984835023069,0.308479904274385,0.281670605230282,0.345549501111551,0.323371974489166,0.286659646023080,0.299507562191320,0.345010953259878,0.258358342966647,0.36466668396479,0.403566489382069,0.264975768434596,0.291049562407676,0.287290470104781,0.285492075790807,0.294532304962872,0.334026609948997,0.320844348145618,0.361256376854744,0.272364213575769,0.311163114499459,0.32335742316144,0.406519918879052,0.362524385194336,0.331237211916482,0.313568113738028,0.309947118060217,0.390917098434381,0.279593867773247,0.245618062045363,0.332488470305132,0.303526947131211,0.302601990396171,0.263987757565364,0.316952767185081,0.340741415191652,0.309407778896770,0.278485566218097,0.276047867997602,0.257806256167939,0.286437477845111,0.265288141509658,0.303967223238962,0.273795562470348,0.333434165735707,0.349266629384926,0.333514046397529,0.218512246981923,0.267314194492599,0.271781413361722,0.311378930939254,0.258842167447812,0.361236563634155,0.315915262071085,0.31013822903832,0.344786383887355,0.265609099327294,0.307536214201563,0.263199577522943,0.280812356996383,0.268776627500840,0.263171769709727,0.317345983453495,0.345689163009364,0.264002306969554,0.293835987155348,0.279463711736424,0.276095353871452,0.356542979820733,0.236833507565015,0.279683938917476,0.277016092879672,0.301391987087081,0.339826438888548,0.262113472495457,0.286843921949348,0.317660930607727,0.405060853563402,0.303876066047238,0.243176132498601,0.331422581786001,0.319866306011241,0.286305300134766,0.33800844878498,0.313075172080481,0.297144690817487,0.277942948396356,0.314351786248809,0.348717480498341,0.308315542724169,0.331281751613871,0.373028434781426,0.321934649477966,0.245198774887067,0.244456440788957,0.238633088744781,0.303878204261854,0.396281833464773,0.442583871433238,0.347720306951543,0.315794695116179,0.336601930450398,0.304051951447889,0.346727623723305,0.331346895874003,0.353570327592561,0.266148341138194,0.297236394218235,0.327106263320161,0.255673750103313,0.331940586774298,0.333997941941603,0.298285046099579,0.311484704241851,0.317801646483676,0.34594758785867,0.366804380994687,0.310854968913704,0.306178016578365,0.244790770495479,0.318846339249496,0.34433937982197,0.319340553363452,0.282147269362132,0.284859833870391,0.30847815888853,0.388778691136589,0.265369881142202,0.346296743547514,0.277767504716484,0.270363871515913,0.260881533981165,0.222103942951533,0.315011455304957,0.285984106798498,0.349521887576826,0.350367523753627,0.336436929813729,0.32010438024548,0.309759616003178,0.294346078838109,0.261953249757594,0.338892745606842,0.295751412208942,0.294211329784619,0.354849805647794,0.421564100910975,0.300662021296678,0.348516059014755,0.302174044948146,0.278244969906886,0.324568741098565,0.314747615064118,0.355603213188108,0.294921209232157,0.241852907172905,0.368698590172245,0.326299525237556,0.288686502001768,0.255215668312072,0.281330158052758,0.325152997419415,0.270464289777084,0.285110686114231,0.292608451031844,0.315492945590056,0.318762381718670,0.2698218888249,0.243012481380607,0.355887853527107,0.272392525954955,0.263208878911708,0.318992958330079,0.319939635674203,0.292994637065717,0.296413718022812,0.333276173474454,0.321285741691755,0.324006932416117,0.249888240153387,0.299088773757761,0.305798096660701,0.25529248505301,0.352762229523771,0.32596245259528,0.353094455028272,0.347941025403727,0.247291641848406,0.288578009236957,0.293836871713277,0.316559441695638,0.312372007476102,0.359649219572048,0.311336552168934,0.245167763716493,0.311046553067231,0.258390222103070,0.318783191323224,0.270041634565839,0.275830265118253,0.337189359164558,0.315374610026678,0.348985022131165,0.245593226522523,0.32416572768677,0.357302954071582,0.347716100206195,0.307904442423642,0.275511521885406,0.29926646407675,0.294508277159886,0.295164425875732,0.319840124955102,0.308851353519825,0.286045775839376,0.277385294150489,0.314286830916017,0.269878867589813,0.306197707128194,0.276528351743226,0.351248206894943,0.304774594256362,0.313592306899221,0.253613636743498,0.268303428996898,0.341226269661409,0.269135654419598,0.263390340012144,0.246168137482201,0.262030495582737,0.313611710258008,0.322224398987688,0.307087053605505,0.248714761523264,0.265619256284650,0.321040774599187,0.304461036538505,0.292895487366218,0.267476122564076,0.344926829922222,0.292642630070688,0.329580816435187,0.322970028717788,0.285087366938044,0.290153032201837,0.27329957399928,0.299636884537711,0.374863358789304,0.296386610452224,0.31284955881964,0.263803456818549,0.3215723987045,0.272749518462963,0.297303729965631,0.35526961338915,0.284658144932239,0.273679295275609,0.256866112269867,0.313040589390199,0.330994969042507,0.509114223207476,0.292639329015715,0.351349255055681,0.455226514756564,0.323403771537402,0.342027451296988,0.29169309640244,0.336068633955453,0.308738065507506,0.407113133818626,0.275297163474303,0.269342627200931,0.366693048054986,0.269948782962878,0.310595618127007,0.292677303094162,0.254781808438318,0.348524630578075,0.306521792841244,0.330007304828908,0.295619535717944,0.358184611960136,0.268934076327167,0.265706812450581,0.299879378533934,0.219772291147798,0.297659224722622,0.323275672831731,0.317498043007652,0.264785662190431,0.350066349168762,0.242477083125220,0.330562819656655,0.268855789166921,0.278698152737144,0.274856179926355,0.351920358826429,0.303889232125422,0.294831762041294,0.293197012237762,0.371517384127543,0.310619907311284,0.321032623528883,0.326565179942912,0.264410610266369,0.281827136513158,0.338825055453735,0.232870559127361,0.271143877513380,0.275702354038777,0.297800237848559,0.335561561683585,0.271221434582129,0.318665681114257,0.345273050628886,0.250434014327858,0.266966058313550,0.338117583592553,0.281538220488535,0.340474765063925,0.305828545760835,0.328573180318256,0.311479571459818,0.313747498647528,0.322259254576082,0.27981254839913,0.370399454535108,0.260220903000555,0.387145176319803,0.328791399894702,0.334369810885423,0.266589052285056,0.290553236104369,0.306656725716705,0.376303359448454,0.355478334907298,0.269579239316184,0.299708402494573,0.292237742250610,0.348863196885155,0.290964638848693,0.258948851129146,0.363220769976958,0.251357763235797,0.267745961417271,0.293166504859873,0.268026525265308,0.294639654656895,0.308438551517479,0.310551362701419,0.309309887358014,0.248656580839793,0.312478117806615,0.316037250945398,0.371553847454148,0.364685385657827,0.395079675425876,0.287045215605863,0.317101206785741,0.238835424083209,0.312464739527873,0.282851753730922,0.433529671714043,0.290039631426995,0.337780352036154,0.271833342234497,0.374346255180109,0.316913999754696,0.293998647928531,0.330570822919804,0.281815759831367,0.315411447857255,0.313899522345218,0.310223123034321,0.317903164863956,0.331638018291433,0.305547175528623,0.278297598399556,0.305698938302267,0.274934846003365,0.344307688510415,0.295983880260781,0.278524428550337,0.261568927727083,0.237214326135749,0.403960482238743,0.267203977018489,0.298971829960782,0.355855856755795,0.29083569541141,0.372218786361398,0.390934251784283,0.347182962921368,0.277680120579429,0.259740922398667,0.318095247083498,0.263713192379094,0.365797215676133,0.296541649157195,0.325299580499432,0.430725680259725,0.327155245261917,0.275712989029083,0.298996797860581,0.311805856279618,0.317313679387841,0.286592504421969,0.347212891967289,0.275961530325731,0.308985341678558,0.330583093620729,0.288202284928508,0.284830648397124,0.352007090863084,0.273498074177347,0.261137346584768,0.299651691270146,0.370580220403106,0.284197069171292,0.333227244756638,0.331179705939698,0.270406628029291,0.313322002249563,0.345428767469446,0.282088464299103,0.275197153491746,0.299244594837832,0.321165312704435,0.285604870510846,0.285289424260641,0.260641049819137,0.3266621733957,0.324153714932395,0.292904056876991,0.369972697079077,0.317449163401383,0.304811295206238,0.283976456183672,0.298702567279604,0.331460276608491,0.341848148534774,0.267689067920236,0.27459617688472,0.277350832793931,0.235156792808919,0.301486227410159,0.395207313013074,0.280868895455185,0.253307818023078,0.320260498892396,0.351945801085282,0.312885069828765,0.315318755620376,0.294996426938217,0.281492811935567,0.293037366839331,0.255032622229669,0.270639247510641,0.358957321512885,0.246656864872831,0.327054928093514,0.322869970999840,0.271413146776486,0.324597106681864,0.317142428262366,0.318716634829546,0.237676101458486,0.315333991047601,0.307631960188569,0.299722857104352,0.258373353828905,0.290588788602406,0.314295013012631,0.345573404159356,0.293182035647765,0.371927955133079,0.305011927269212,0.287710892198656,0.309677218989987,0.258185486006473,0.272446192786978,0.374185839879887,0.27824626061746,0.303728468020878,0.320718736482135,0.331023659719652,0.320256710128967,0.232014675667342,0.372473576512916,0.277951119621193,0.341197735423288,0.323904228350452,0.253502134800080,0.310659864360482,0.285505684220881,0.385287607426584,0.290590095823524,0.258903066482219,0.290753460175058,0.290388319545154,0.302989606213615,0.273879329810992,0.321982572869308,0.289226281446324,0.304358066323739,0.249109805569477,0.293642896601822,0.249577576453184,0.24555094247882,0.321838060973501,0.241429232192433,0.291614389160650,0.278345063583084,0.248848043553140,0.297847581011156,0.373687137281681,0.279404523645524,0.274917688753674,0.314416471335076,0.302111406868376,0.260466535417276,0.272876249954321,0.304704158893226,0.250403195438317,0.293957069907088,0.318595066166853,0.287696743445429,0.337623128564848,0.29991008838773,0.282436101331685,0.385975054283785,0.381148035661777,0.368495458237402,0.3970602279026,0.282412556551878,0.252254479883160,0.253972971578115,0.297527127184257,0.350420447411158,0.349061152200143,0.334823331368266,0.304716178541812,0.281311892316997,0.270175272050292,0.273091241879201,0.3112057403656,0.272788235741669,0.310112792203047,0.270976102592846,0.218751406948838,0.294514848707936,0.285816927981457,0.310370735784483,0.274411365846577,0.344048396413721,0.302378454287366,0.315118911794658,0.313682493512115,0.302033457238259,0.376349322045573,0.298659991110886,0.359754922386248,0.257174057434325,0.307477077212953,0.276159907195633,0.397483663161805,0.328373233636841,0.291510512556276,0.304204705952249,0.339564626287246,0.234440144177086,0.239918624885638,0.242392899032177,0.240168573410354,0.323097557684902,0.276553777675090,0.337157114896988,0.320435505795584,0.258015184959037,0.2869412493864,0.341425400988749,0.340100438237409,0.259876177598349,0.273039469930294,0.279255011637529,0.510397280716261,0.354090395548933,0.282328965251628,0.308308602859621,0.322614327178917,0.289822312071052,0.285965917891699,0.244465013384131,0.302174180547927,0.260159130603974,0.284788029456047,0.268743035370282,0.341630301703923,0.372714496610361,0.249317028513317,0.293540974476085,0.284939239796634,0.325505793596821,0.354292315022041,0.33566596032235,0.296830424893865,0.277813729924364,0.281323602974854,0.360704305534735,0.256809932053576,0.306280889572704,0.32038579239018,0.283222207006188,0.363990483321011,0.280076366495618,0.308879783005743,0.449164772569066,0.291906648841933,0.359084195391717,0.285707822486704,0.256242539791465,0.319118494343560,0.244396171618451,0.256460692818141,0.290195754590155,0.324873690668835,0.274999507143701,0.331204114262778,0.265909374919345,0.31107987551364,0.288402139062067,0.272171241407072,0.312485055839591,0.283058089930695,0.320465240101161,0.275114670446422,0.298991561100483,0.284869469835918,0.288418748604774,0.337868654557922,0.264172581829661,0.27448895174229,0.307459644374481,0.331447686537012,0.259770704900216,0.326917261030911,0.343721504150205,0.262129534731058,0.274166098792912,0.268290954788734,0.381534171861236,0.334908856337216,0.314481972247762,0.292809462735474,0.349735038363701,0.297636144226611,0.255138492270518,0.326284252996569,0.277173343277086,0.384501089715466,0.338650833308915,0.268611406094172,0.276716439105702,0.404778230018295,0.297947871421736,0.298147902120641,0.291077222519069,0.268893912185689,0.235695011117347,0.351580836436364,0.314632943144786,0.277984768729394,0.300792832139679,0.332828219754297,0.293714724264905,0.321966079983784,0.266508733062294,0.247711600368392,0.354314449011283,0.330308358393191,0.284431659819722,0.370497322620380,0.274369012646893,0.320045368636888,0.254578360186470,0.372843314353905,0.234581654600456,0.317530533604004,0.328484691817442,0.310095700149222,0.315897184512026,0.279896007510656,0.324100886212231,0.313968074071425,0.471229240873522,0.377364614876348,0.342100019546196,0.326107256193269,0.265399492307679,0.27173168719629,0.419866374465983,0.329930570443524,0.242801793491990,0.275971284751489,0.245584595063479,0.320322349456363,0.333756755932692,0.294240983620491,0.340825803734682,0.308746453610653,0.294100042845796,0.273933646266220,0.268516944718263,0.313111496984599,0.260853868298833,0.28141901897843,0.294772860995,0.318304060726437,0.273661594723906,0.264506056661303,0.271372217636381,0.319315590653993,0.282048980786277,0.325660263555785,0.263730134681166,0.344695197004029,0.306053936278103,0.279866870702233,0.289416563681475,0.368402188293381,0.287234818366875,0.318113373014644,0.238462661625965,0.278385904329391,0.328101768742949,0.312637692122922,0.285798041952034,0.292902269402410,0.317683024630519,0.244416366684023,0.349604505317583,0.389364170905695,0.33723139729053,0.301480791661468,0.240588692123128,0.301631309967474,0.347948826271168,0.340167315737737,0.233341750859482,0.419711342975355,0.394535896171091,0.274658771023198,0.281990244213129,0.273134676220148,0.284124006222379,0.306326124474207,0.290083678046353,0.285589428244757,0.344575149905001,0.273272417235681,0.296623896288353,0.310538486302182,0.27115675945152,0.284467664027929,0.241901819764728,0.327660718726952,0.318723873146334,0.304622999466345,0.298802433925625,0.234903430686119,0.275258342856866,0.251050811557313,0.28490095944942,0.311769325337464,0.382371236718217,0.250456314624159,0.317451491867466,0.301996674690063,0.314087164557906,0.270845855531742,0.278549309098081,0.320368057474805,0.333036344652764,0.328070480455099,0.477542515153339,0.243802983691388,0.309109057209962,0.308856019562314,0.326575081910034,0.282898164338742,0.324197608986282,0.328379942649755,0.231281197453713,0.367361471696561,0.293070935058904,0.388509445326767,0.311078655879783,0.370122984296183,0.33942822663173,0.326941338796940,0.267609093515882,0.307063160964302,0.290889346341316,0.36830614532299,0.263032828777685,0.445690750777469,0.260031542274168,0.326810548036084,0.374689874322352,0.411434017524616,0.307301000295918,0.345723473539533,0.240996430404323,0.383346799979667,0.380810856786394,0.244396882324374,0.32326464865427,0.293756998581601,0.316696051668782,0.235408247059727,0.304288913660240,0.27985857860668,0.309194906480707,0.269024633741467,0.335249481291439,0.283956104930062,0.351840244600723,0.296291192843452,0.328091893836764,0.307737779640305,0.285073337470796,0.355503775523902,0.334820502634735,0.324417911515552,0.281497116806154,0.302750655744796,0.331448042862847,0.233474723555783,0.264214911256496,0.298647063977350,0.281632116246339,0.305873820408295,0.299608967936654,0.371965302457248,0.278470126641658,0.334258332927271,0.4193623795564,0.321552249302841,0.284070202181262,0.29362557266574,0.362465774432523,0.338318593297572,0.312590028805832,0.289629852291182,0.270398740633054,0.241974875861294,0.276352971722038,0.291507787411421,0.256795974337845,0.380824860399575,0.280829263612174,0.321915720783929,0.43207947388287,0.381694095437879};
  RMA::backgroundCorrect(gaussDat, 512);
  for(i = 0; i < gaussDat.size(); i++) {
    CPPUNIT_ASSERT( closeEnough( gaussDat[i], gold[i] ) );
  }
}

void RMATest::testFft() {
  double gold[] =  {36,0.000000,-4,-9.656854,-4,-4.000000,-4,-1.656854,-4,0.000000,-4,1.656854,-4,4.000000,-4,9.656854};
  double goldInv[] = {1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0};
  vector<float> dat;
  int i = 0;
  for(i = 0; i < 8; i++) {
    dat.push_back(i+1);
    dat.push_back(0);
  }

  RMA::fft(dat, false);
  for(i = 0; i < 16; i++) {
    CPPUNIT_ASSERT( closeEnough( gold[i], dat[i] ) );
  }
  RMA::fft(dat, true);
  for(i = 0; i < 16; i++) {
    dat[i] = dat[i]/8;
    CPPUNIT_ASSERT( closeEnough( fabs(goldInv[i]), fabs(dat[i]) ) );
  }
}

void RMATest::testStats() {
  CPPUNIT_ASSERT( closeEnough( RMA::pnorm(.5),  0.6914625) );
  CPPUNIT_ASSERT( closeEnough( RMA::pnorm(1), 0.8413447 ) );
  CPPUNIT_ASSERT( closeEnough( RMA::pnorm(2), 0.9772499 ));
  CPPUNIT_ASSERT( closeEnough( RMA::pnorm(-1), 0.1586553 ));
}

// Registers the fixture into the 'registry'
CPPUNIT_TEST_SUITE_REGISTRATION( RMATest );

