#
# cvs:affy/sdk/Makefile.defs ---
#
# $Id: Makefile.defs,v 1.47 2009-09-25 17:48:49 mspald Exp $
#
# Read "Makefile" for what a description of the build process.
#
# Build in one pass.

#
SHELL:=bash

# Dont try the defaults.
.SUFFIXES:

# The default target is a recursive build.
all: build

# The root of the sdk was not set. Complain.
ifeq (${sdk_root},)
  $(error "sdk_root must be set before including this file.")
endif

# export sdk_root for others programs to use.
export sdk_root

### Functions

# return the path which should be used for '$library'.
# If it the library is not in the output directory and prebuilt, use it,
# otherwise the (local) output library path.
#define find_lib_path_for
find_lib_path_for=\
$(strip \
  $(if $(wildcard ${sdk_output_lib}/lib${1}.a),\
    ${sdk_output_lib}/lib${1}.a,\
    $(if $(wildcard ${with_prebuilt_lib}/lib${1}.a),\
      ${with_prebuilt_lib}/lib${1}.a,\
      ${sdk_output_lib}/lib${1}.a)))

# returns true or "" (for false)
is_prebuilt_lib=\
$(strip \
  $(if $(wildcard ${sdk_output_lib}/lib${1}.a),\
    ,\
    $(if $(wildcard ${with_prebuilt_lib}/lib${1}.a),\
      true,\
      )))

### Include config and site Makefiles (for user vars)

# Generate filenames for later use.
m2_makefile:=${sdk_root}/Makefile
m2_makefile_conf:=${m2_makefile}.config
m2_makefile_defs:=${m2_makefile}.defs
m2_makefile_post:=${m2_makefile}.post
m2_makefile_site:=${m2_makefile}.site
# for users to use. "m2" is internal
sdk_makefile_post:=${m2_makefile_post}

# $(error ${sdk_makefile_post})

# Convert the path into an absolute one.
# usage:  foo:=$(call make_abs_path,${some_path})
# note that leading spaces are bad
define make_abs_path
$(if $(filter /%,${1}),${1},${PWD}/${1})
endef

### cpucomsys  (Before Makefile.{config,site} so it can be changed)
#ifeq ($(origin CPUCOMSYS),undefined)
  CPUCOMSYS:=$(shell ${sdk_root}/build/cpucomsys.sh)
  ifeq (${CPUCOMSYS},unknown)
    $(error CPUCOMSYS is undefined.  Set it or fix '${sdk_root}/build/cpucomsys.sh')
  endif
#endif

# "Makefile.config" is generated by "./configure"
# It is required but might not have any vars in it.
# (which means we dont know where to install to.)
ifeq ($(wildcard ${m2_makefile_conf}),${m2_makefile_conf})
  include ${m2_makefile_conf}
else
  $(error The file '${m2_makefile_conf}' does not exist! Run './configure')
endif

# "Makefile.site" is an optional file for people to
# put site customizations in.
ifeq ($(wildcard ${m2_makefile_site}),${m2_makefile_site})
  include ${m2_makefile_site}
endif

# IS_DARWIN marks this as darwin and saves repeating this test.
# If it has "-apple-" in the middle, then this is a darwin system...
IS_DARWIN:=0
ifeq ($(findstring -apple-,${CPUCOMSYS}),-apple-)
  # ...unless it is a linux system
  ifneq ($(findstring -apple-linux,${CPUCOMSYS}),-apple-linux)
    IS_DARWIN:=1
  endif
endif

# Deal with differences in "cp" args
CP:=cp -a
ifeq ($(findstring -apple-,${CPUCOMSYS}),-apple-)
  # ...unless it is a linux system
  ifneq ($(findstring -apple-linux,${CPUCOMSYS}),-apple-linux)
    CP:=cp -p
  endif
endif

### Suppy defaults for unset vars.

# Default top of the outputs.
ifndef sdk_output_top
  sdk_output_top:=${sdk_root}/output/${CPUCOMSYS}
endif
# programs
ifndef sdk_output_bin
  sdk_output_bin:=${sdk_output_top}/bin
endif
# ".a"s and ".so"s
ifndef sdk_output_lib
  sdk_output_lib:=${sdk_output_top}/lib
endif
# "*.o"
ifndef sdk_output_obj
  sdk_output_obj:=${sdk_output_top}/obj
endif

# test, environment variable is used for Windows requirements.
# Run-time setting takes precedence over configure
ifdef sdk_output_test
  ifndef APT_TEST_DIR
    export APT_TEST_DIR:=${sdk_output_test}
  endif
endif

# Persumably the "#include" files are arch independent, but they arent
# includes which arent go in "sdk_output_include"
ifndef sdk_output_include
  sdk_output_include:=${sdk_output_top}/include
endif
# includes which are go in "sdk_output_share_include"
ifndef sdk_output_share_include
  sdk_output_share_include:=${sdk_root}/output/share/include
endif

# The dependency files default to being a subdir of the source
# They are arch independent.
ifndef sdk_output_dep
  sdk_output_dep:=./.dep
endif

# List of output directories
sdk_output_dirs:=${sdk_output_bin} ${sdk_output_dep} ${sdk_output_lib} \
	${sdk_output_obj} ${sdk_output_include} ${sdk_output_share_include}

### Expand prebuilt library path if possible.

#
ifneq ($(wildcard ${with_prebuilt_top}),)
  # as is
  with_prebuilt_lib:=${with_prebuilt_top}
  # try and expand the name with cpucomsys
  ifneq ($(wildcard ${with_prebuilt_top}/${CPUCOMSYS}/lib),)
    with_prebuilt_lib:=${with_prebuilt_lib}/${CPUCOMSYS}/lib
  endif
  # make up the flags for it
  with_prebuilt_flags:=-L${with_prebuilt_lib}
  # make a list of libraries which are prebuilt
  with_prebuilt_found_path:=$(wildcard ${with_prebuilt_lib}/lib*.a)
  #$(error ${with_prebuilt_found_path})
  with_prebuilt_found:=$(patsubst %.a,%,$(patsubst ${with_prebuilt_lib}/lib%,%,${with_prebuilt_found_path}))
  #$(error ${with_prebuilt_found})
endif

### Install -- where should all these files be installed.

# What libraries we will install
install_lib_names:=affycalvin affysdk affyfile affyfile5 affyutil newmat

# If it is set then we can install.
ifdef install_prefix
  # arch independent scripts
  ifndef install_bin
    install_share_bin:=${install_prefix}/bin
  endif
  ifndef install_exec_prefix
     install_exec_prefix:=${install_prefix}
  endif
  # arch dependent subdirs
  ifndef install_bin
    install_exec_bin:=${install_exec_prefix}/bin
  endif
  ifndef install_lib
    install_exec_lib:=${install_exec_prefix}/lib
  endif
  # arch independent
  ifndef install_doc
    install_doc:=${install_prefix}/doc/dox-html
  endif

# List of install directories to make
# sort to remove dups
install_dirs:=$(sort ${install_prefix} ${install_share_bin} ${install_exec_bin} ${install_exec_lib} ${install_doc})
#
${install_dirs}:
	mkdir -p $@
endif

### Release -- where release builds go
ifndef APT_REL_PATH
export APT_REL_PATH:=${sdk_root}/release
endif

ifndef DIST_CPUCOMSYS
  ifndef CPUCOMSYS
    DIST_CPUCOMSYS:=unknown
  else
    DIST_CPUCOMSYS:=$(CPUCOMSYS)
  endif
endif

ifndef DIST_NAME
DIST_NAME=$(shell ${sdk_root}/build/distvername.sh)
ifeq (${DIST_NAME},)
  $(error DIST_NAME is unset!)
endif
# export DIST_NAME to avoid looking it up again.
export DIST_NAME
endif

DIST_NAME_SRC:=${DIST_NAME}-src
DIST_NAME_BIN:=${DIST_NAME}-${DIST_CPUCOMSYS}
DIST_PATH_SRC = ${APT_REL_PATH}/${DIST_NAME_SRC}
DIST_PATH_BIN = ${APT_REL_PATH}/${DIST_NAME_BIN}

##########

# We should test for "util/AptVersionInfoGenerated.h"
# if found, then pass just -DAPT_HAVE_APTVERSIONINFOGENERATED=1
# and not set the following on the command line.

# the "ifndef/export" lines prevent us from evaluating these
# more than once per make invocation
# this saves time and keeps the values the same across a compile

ifndef APT_VER_BAMBOO_BUILD
export APT_VER_BAMBOO_BUILD:="na"
endif

ifndef APT_VER_RELEASE
export APT_VER_RELEASE:="$(shell ${sdk_root}/build/vername.sh -r)"
  ifeq (${APT_VER_RELEASE},)
    $(error APT_VER_RELEASE not set.)
  endif
endif

# Set version for including in documents
ifndef DOC_APT_VERSION
export DOC_APT_VERSION:=${APT_VER_RELEASE}
endif

ifndef APT_VER_COMPILE_DATE
export APT_VER_COMPILE_DATE:="$(shell date +%Y%m%d-%H%M)"
endif

ifndef APT_VER_COMPILE_HOST
export APT_VER_COMPILE_HOST:="$(shell hostname)"
endif

ifndef APT_VER_COMPILE_OS
export APT_VER_COMPILE_OS:="$(shell uname)"
endif

ifndef APT_VER_COMPILE_OS_VERSION
export APT_VER_COMPILE_OS_VERSION:="$(shell uname -a)"
endif

ifndef APT_VER_COMPILE_USER
export APT_VER_COMPILE_USER:="${USER}"
endif

ifndef APT_VER_SVN_VERSION
export APT_VER_SVN_VERSION:="r$(shell ${sdk_root}/build/vername.sh -s)"
# to check that this is only evaled once.
# also not put an "r" if "exported".
# info "running APT_VER_SVN_VERSION" ${APT_VER_SVN_VERSION})
endif

ifndef APT_VER_SVN_URL
export APT_VER_SVN_URL:="$(shell ${sdk_root}/build/vername.sh -u)"
endif

sdk_apt_ver_flags:=\
	-DAPT_VER_BAMBOO_BUILD='${APT_VER_BAMBOO_BUILD}' \
	-DAPT_VER_RELEASE='${APT_VER_RELEASE}' \
	-DAPT_VER_COMPILE_DATE='${APT_VER_COMPILE_DATE}' \
	-DAPT_VER_COMPILE_HOST='${APT_VER_COMPILE_HOST}' \
	-DAPT_VER_COMPILE_OS='${APT_VER_COMPILE_OS}' \
	-DAPT_VER_COMPILE_OS_VERSION='${APT_VER_COMPILE_OS_VERSION}' \
	-DAPT_VER_COMPILE_USER='${APT_VER_COMPILE_USER}' \
	-DAPT_VER_SVN_VERSION='${APT_VER_SVN_VERSION}' \
	-DAPT_VER_SVN_URL='${APT_VER_SVN_URL}'

# just to see what it looks like.
_debug_apt_version:
	@echo "APT_VER_RELEASE=${APT_VER_RELEASE}"
	@echo "APT_VER_BAMBOO_BUILD=${APT_VER_BAMBOO_BUILD}"
	@echo "APT_VER_RELEASE=${APT_VER_RELEASE}"
	@echo "APT_VER_COMPILE_DATE=${APT_VER_COMPILE_DATE}"
	@echo "APT_VER_COMPILE_HOST=${APT_VER_COMPILE_HOST}"
	@echo "APT_VER_COMPILE_OS=${APT_VER_COMPILE_OS}"
	@echo "APT_VER_COMPILE_OS_VERSION=${APT_VER_COMPILE_OS_VERSION}"
	@echo "APT_VER_COMPILE_USER=${APT_VER_COMPILE_USER}"
	@echo "APT_VER_SVN_VERSION=${APT_VER_SVN_VERSION}"
	@echo "APT_VER_SVN_URL=${APT_VER_SVN_URL}"
	@echo "sdk_apt_ver_flags=${sdk_apt_ver_flags}"

##########

### Newmat
newmat_top:=${sdk_root}/../external/newmat
newmat_cflags:=-I${newmat_top}
newmat_lflags:=-lnewmat
#
newmat_lib_path:=$(call find_lib_path_for,newmat)

### Hdf5
hdf5_top:=${sdk_root}/../external/hdf5
hdf5_src:=${hdf5_top}
#
# need to do something about abs/rel paths here. (later)
hdf5_prefix:=$(call make_abs_path,${sdk_output_top})
hdf5_prefix_bin:=$(call make_abs_path,${sdk_output_bin})
hdf5_prefix_lib:=$(call make_abs_path,${sdk_output_lib})
hdf5_prefix_include:=$(call make_abs_path,${sdk_output_share_include})
#
hdf5_cflags:=-I${hdf5_prefix_include}
hdf5_lflags:=-L${hdf5_prefix_lib} -lhdf5

sdk_output_dirs+=${hdf5_prefix} ${hdf5_prefix_bin} ${hdf5_prefix_lib} ${hdf5_prefix_include}

### pcre
pcre_top:=${sdk_root}/../external/pcre
pcre_src:=${pcre_top}
#
# need to do something about abs/rel paths here. (later)
pcre_prefix:=$(call make_abs_path,${sdk_output_top})
pcre_prefix_bin:=$(call make_abs_path,${sdk_output_bin})
pcre_prefix_lib:=$(call make_abs_path,${sdk_output_lib})
pcre_prefix_include:=$(call make_abs_path,${sdk_output_include})
#
pcre_cflags:=-I${pcre_prefix_include}
pcre_lflags:=-L${pcre_prefix_lib} -lpcre
# dont try and use a prebuilt library for now.
# pcre_lib_path:=$(call find_lib_path_for,pcre)

sdk_output_dirs+=${pcre_prefix} ${pcre_prefix_bin} ${pcre_prefix_lib} ${pcre_prefix_include}

### Sqlite

# the name of *our* sqlite library.
# Some systems have their own which we dont want to use.
sqlite_libname:=asqlite3
sqlite_top:=${sdk_root}/../external/sqlite

### xerces
xerces_top:=${sdk_root}/../external/xerces
xerces_src:=${xerces_top}

xerces_prefix:=$(call make_abs_path,${sdk_output_top})
xerces_prefix_bin:=$(call make_abs_path,${sdk_output_bin})
xerces_prefix_lib:=$(call make_abs_path,${sdk_output_lib})
xerces_prefix_include:=$(call make_abs_path,${sdk_output_include})

sdk_output_dirs+=${xerces_prefix} ${xerces_prefix_bin} ${xerces_prefix_lib} ${xerces_prefix_include}

#
xerces_cflags:=-I${xerces_prefix_include}
xerces_lflags:=-L${xerces_prefix_lib} -lxerces-c

### Zlib
zlib_top:=${sdk_root}/../external/zlib
zlib_src:=${zlib_top}
#
zlib_prefix:=$(call make_abs_path,${sdk_output_top})
zlib_prefix_bin:=$(call make_abs_path,${sdk_output_bin})
zlib_prefix_lib:=$(call make_abs_path,${sdk_output_lib})
zlib_prefix_include:=$(call make_abs_path,${sdk_output_share_include})
#
zlib_cflags:=-I${zlib_prefix_include}
zlib_lflags:=-L${zlib_prefix_lib} -lz

sdk_output_dirs+=${zlib_prefix_bin} ${zlib_prefix_bin} ${zlib_prefix_include}

##########

### Command Console
calvin_cpp_flags:=
# @todo: this isnt a calvin path, but is still needed.
calvin_cpp_flags+=-I${sdk_root}/file
# build up the calvin include paths.
calvin_cpp_flags+=-I${sdk_root}/calvin_files/array/src
calvin_cpp_flags+=-I${sdk_root}/calvin_files/data/src
calvin_cpp_flags+=-I${sdk_root}/calvin_files/exception/src
calvin_cpp_flags+=-I${sdk_root}/calvin_files/fusion/src
calvin_cpp_flags+=-I${sdk_root}/calvin_files/fusion/src/CalvinAdapter
calvin_cpp_flags+=-I${sdk_root}/calvin_files/fusion/src/GCOSAdapter
calvin_cpp_flags+=-I${sdk_root}/calvin_files/parameter/src
calvin_cpp_flags+=-I${sdk_root}/calvin_files/parsers/src
calvin_cpp_flags+=-I${sdk_root}/calvin_files/portability/src
calvin_cpp_flags+=-I${sdk_root}/calvin_files/template/src
calvin_cpp_flags+=-I${sdk_root}/calvin_files/utils/src
calvin_cpp_flags+=-I${sdk_root}/calvin_files/writers/src
# MYBRID CHANGE
calvin_cpp_flags:=
# stick onto the end for now.
sdk_cpp_cflags+=${calvin_cpp_flags} -Wno-non-virtual-dtor

# cpp
m2_cppunit_cflags:=-Wno-non-virtual-dtor
# add the cwd so we can say '#include "Foo.h"'
# MYBRID CHANGE
#sdk_cpp_cflags+=-I.
# Add sdk_root so we can say '#include "full/sdk/path"'
sdk_cpp_cflags+=-I${sdk_root}
# add the directory which has the include files for external libraries.
sdk_cpp_cflags+=-I${sdk_output_include}
sdk_cpp_cflags+=-I${sdk_output_share_include}
# we also want to have "external" so we dont have to say:
# '#include "../../../exernal/foo/foo.h"', but can say '#include "foo/foo.h"'
sdk_cpp_cflags+=-I${sdk_root}/../external
# where newmat is.
sdk_cpp_cflags+=${newmat_cflags}
# tack on our long list of "APT_VER" defines.
sdk_cpp_cflags+=${sdk_apt_ver_flags}

# use IEEE math so we i386-intel-linux results can be compared across systems.
ifeq (${CPUCOMSYS},i386-intel-linux)
  sdk_arch_flags+=-mfpmath=sse -msse2
endif

#
sdk_cpp_lflags+=${sdk_osx_lflags} ${sdk_arch_flags} -L${sdk_output_lib} ${with_prebuilt_flags}
# CPPFLAGS last so they can take effect.
# sdk_cxx_dep is for dependency generation
sdk_cxx_dep=${CXX} ${sdk_cpp_cflags} ${m2_cppunit_cflags} ${CPPFLAGS}
# sdk_cxx is for actual compliation, deps + arch flags
sdk_cxx=${sdk_cxx_dep} ${sdk_arch_flags}

# command to generate dependencies
sdk_cxx_depend=${sdk_cxx_dep} -MM -MF ${1} -MT ${2} ${3}
#
sdk_cxx_obj=${sdk_cxx} -c -o ${1} ${2}
#
sdk_cxx_exe=${sdk_cxx} -o ${1} ${2} ${sdk_cpp_lflags} $(3:%=-l%)

##########
#
# Called Macro Definitions
#

define sdk_define_obj_def

_depend+=${sdk_output_dep}/$(1).d

${sdk_output_dep}/$(1).d: $(2) | ${sdk_output_dep}
	$$(call sdk_cxx_depend,$${sdk_output_dep}/$(1).d,'$$$${sdk_output_obj}/$(1).o',$(2))

_build_obj+=${sdk_output_obj}/$(1).o

${sdk_output_obj}/$(1).o: $(2) | ${sdk_output_obj} _depend
	$$(call sdk_cxx_obj,$${sdk_output_obj}/$(1).o,$(2))

# add to lists
m2_dep_list+=${sdk_output_dep}/$(1).d
m2_cpp_list+=$(2)
m2_obj_list+=${sdk_output_obj}/$(1).o
endef
#
sdk_define_obj=$(eval $(call sdk_define_obj_def,$(basename $(notdir $(1))),$(1)))


#####

define sdk_define_exe_def

_depend+=${sdk_output_dep}/$(1).d

${sdk_output_dep}/$(1).d: $(2) | ${sdk_output_dep}
	$$(call sdk_cxx_depend,${sdk_output_dep}/$(1).d,'$$$${sdk_output_exe}/$(1)',$(2))

_build_exe+=${sdk_output_bin}/$(1)

# rebuild if the libs change
${sdk_output_bin}/$(1): $(2) ${sdk_depend_paths} | ${sdk_output_bin}
	$$(call sdk_cxx_exe,${sdk_output_bin}/$(1),$(2),$(if $(3),$(3),$${sdk_link_libs}))

# add to lists
m2_dep_list+=${sdk_output_dep}/$(1).d
m2_cpp_list+=$(2)
m2_exe_list+=${sdk_output_bin}/$(1)

endef
# output name, objects, libraries
sdk_define_exe=$(eval $(call sdk_define_exe_def,$(1),$(2),$(3)))



### INSTALL
define sdk_define_install_exe_def

${install_exec_bin}/$(1): ${sdk_output_bin}/$(1) | ${install_exec_bin}
	install -m 555 $$< $$@

# add to lists
_install_exe+=${install_exec_bin}/$(1)

endef

#
sdk_define_install_exe=$(eval $(call sdk_define_install_exe_def,$(1)))

#####

define sdk_define_check_exe_def

ifeq ($${with_cppunit},1)

_depend+=${sdk_output_dep}/$(1).d
m2_dep_list+=${sdk_output_dep}/$(1).d

${sdk_output_dep}/$(1).d: $(2) | ${sdk_output_dep}
	$$(call sdk_cxx_depend,${sdk_output_dep}/$(1).d,'$$$${sdk_output_exe}/$(1)',$(2))

#
${sdk_output_bin}/$(1): $(2) ${sdk_depend_paths}
	$$(call sdk_cxx_exe,${sdk_output_bin}/$(1),$(2) ${sdk_root}/build/CPPMain.cpp,$(if $(3),$(3),$${sdk_link_libs})) $${m2_cppunit_cflags} $${m2_cppunit_lflags}

# add to the list of executables.
_check_exe+=${sdk_output_bin}/$(1)
# add it to the list of things to run.
_check_run+=${sdk_output_bin}/$(1)_run

ifeq ($${with_cppunit_xml},1)
  cpp_run_xml_args:=--xml=true
endif

${sdk_output_bin}/$(1)_run: ${sdk_output_bin}/$(1)
	-@rm -f CPPUnitTestResults.xml JUnitTestResults.xml
	${sdk_output_bin}/$(1) ${cpp_run_xml_args}
# when "./configure --with-cppunit-xml"
# we want to produce xml and process it.
ifeq ($${with_cppunit_xml},1)
	@if [ -f CPPUnitTestResults.xml ] ; \
	then \
	  xsltproc ${sdk_root}/build/cppunit2junit.xsl \
	    CPPUnitTestResults.xml > JUnitTestResults.xml ; \
	fi
# end of if with_cppunit_xml
endif

# end of if with_cppunit
endif

# add to lists

m2_check_cpp_list+=$(2)
m2_check_exe_list+=${sdk_output_bin}/$(1)

endef
#
sdk_define_check_exe=$(eval $(call sdk_define_check_exe_def,$(notdir $(basename $(1))),$(2)))

#####

define sdk_set_lib_name_def
export sdk_lib_name:=$(1)
export sdk_lib_path:=${sdk_output_lib}/lib$(1).a
endef

sdk_set_lib_name=$(eval $(call sdk_set_lib_name_def,$(1)))

# set the default
ifeq (${sdk_lib_name},)
  $(call sdk_set_lib_name,affysdk)
else
  $(call sdk_set_lib_name,${sdk_lib_name})
endif

_printenv:
	printenv | sort | less


# cant rely on 'export' in the following -- what happens when make is run from a lower level?
# export sdk_link_libs:=$(1)

# libraries we wont depend on
sdk_dont_depend_libs:=m c
# If libX is in sdk_output_lib, use it
# Otherwise see if it is prebuilt, if so use it.
# If not prebuilt, we need to build it.
define sdk_set_link_libs_def
  sdk_link_libs:=${1}
  sdk_depend_libs:=$$(filter-out $${sdk_dont_depend_libs},${1})
  sdk_depend_paths:=$$(strip $$(foreach X,$${sdk_depend_libs},$$(call find_lib_path_for,$${X})))
endef

sdk_set_link_libs=$(eval $(call sdk_set_link_libs_def,${1}))

# Note: the order of libs is important.
# libs must come before the libs they depend on.
# To add "-l libXXXX.a" to the compiler, add "XXXX" here.
ifeq (${sdk_link_libs},)
   $(call sdk_set_link_libs,affysdk affycalvin affyfile5 affyfile affyutil \
	${sqlite_libname} hdf5 newmat xerces-c \
	pcrecpp pcreposix pcre \
        pywavelets \
	m z)
endif

#$(error ${sdk_depend_paths})

_debug_sdk_depend_paths:
	@echo "sdk_link_libs   ="${sdk_link_libs}
	@echo "sdk_depend_libs ="${sdk_depend_libs}
	@echo "sdk_depend_paths="${sdk_depend_paths}

#$(error $(sdk_depend_libs))
#$(error $(sdk_depend_paths))

#####

# for use as a command
# $(call do_rm,lib*,optinal message)
do_rm=$(if $(wildcard ${1}),rm $(wildcard ${1}),$(if ${2},@echo ${2}))

# Local Variables:
# mode: makefile
# End:
