#!/usr/bin/env perl
#
# cvs:affy/sdk/configure ---
#
# $Id: configure,v 1.39 2009-08-10 17:03:46 awilli Exp $
#
# Please read "Makefile" for a description of the build process.
# This "./configure" generates the "Makefile.config" which is
# used in the build process.

#use strict;
use Getopt::Long qw(:config pass_through);
use File::Basename;

# use strict;

#
$M2_file="Makefile.config";
$M2_temp=$M2_file.".temp";

# options for configure
$opt_help=0;
$opt_verbose=1;
# options for the build process
$opt_prefix=undef;
$opt_exec_prefix=undef;
$opt_with_output=undef;
$opt_with_output_tmp=undef;
$opt_with_output_tmp_path=undef;
$opt_with_output_lib=undef;
$opt_with_output_obj=undef;
# Where to draw prebuilt libraries from
$opt_with_prebuilt_lib=undef;
#
# @todo these should be able to refer to prebuilt libs.
$opt_with_pcre=undef;
$opt_with_hdf5=undef;
$opt_with_zlib=undef;
# m2 opts
$opt_debug=undef;
#
$opt_cflags=undef;
$opt_lflags=undef;
# Quick targets
$opt_build=undef;
$opt_install=undef;
$opt_arch=undef;
# get an idea as to the system we are on.
$opt_cpucomsys=$ENV{CPUCOMSYS}||`./build/cpucomsys.sh`;
chomp($opt_cpucomsys);
# JUnit XML output
$opt_with_cppunit_xml="0";
# Use CPPUNIT
$opt_with_cppunit="1";
# Default location of regression data
$opt_regression_data="";

# Extract the regression data location from LOCATION.txt
$location_txt_file="./regression-data/LOCATION.txt";
if (-f $location_txt_file) {
  open(LOCTXT,$location_txt_file)||die "Cant open '$location_txt_file'";
  while ($l=<LOCTXT>) {
    chomp($l);
    if ($l=~m/LOCATION:\s*(.+)$/) {
      $opt_regression_data=$1;
      break;
    }
  }
  close(LOCTXT);
}



#
{
  $|=1;

  # Record
  @ORIG_ARGV=@ARGV;

  if (!GetOptions(
         "help|h",
         "verbose|v",
         #
         "prefix=s",
         "exec-prefix=s",
         "debug|dbg",
         "cflags=s",
         "lflags=s",
         "arch=s",
         "cpucomsys=s",
         "regression-data=s",
         #
         "with-output:s",
         "with-output-tmp:s",
         "with-output-tmp-path=s",
         "with-output-lib:s",
         "with-output-obj:s",
         #
         "with-output-test:s",
         #
         "with-zlib=s",
         "with-hdf5=s",
         "with-pcre=s",
         #
         "with-prebuilt-lib|with-prebuilt-libs=s",
         # quick options
         "build",
         "install",
      )) {
    usage(1);
  }

  # handle --with-/--without-
  while ($arg=shift(@ARGV)) {
    if ($arg=~m/--?with(out)?-([\w\-]+)/) {
      $with_val=(($1 eq "out")?"0":"1"); # as strings!
      $with_name=$2;
      if ($with_name eq "cppunit") {
        $opt_with_cppunit=$with_val;
      }
      elsif ($with_name eq "cppunit-xml") {
        $opt_with_cppunit_xml=$with_val;
      }
      else {
        print "$0: Unknown option: $arg\n";
        exit(1);
      }
    } else {
      print "$0: Unknown option: $arg\n";
      exit(1);
    }
  }

  #
  if ($opt_help) {
    usage(0);
  }

  if ($opt_cflags=~m/(\-O\d)/) {
    $gcc_opt_O=$1;
  }

  $opt_cflags="-Wall -Wno-sign-compare -std=c++14 -lstdc++";

  # if it starts with "i386" then this is a 32bit system.
  # we work with large files, an would like to use the 64bit system calls.
  if ($opt_cpucomsys=~/^i386/) {
      $opt_cflags=$opt_cflags." -D_FILE_OFFSET_BITS=64";
  } 

  if ($opt_debug==1) {
      if (!$gcc_opt_O) {
	  $opt_cflags=$opt_cflags." -O0"
      }
      $opt_cflags=$opt_cflags." -ggdb";
  }
  else {
    if (!$gcc_opt_O) {
	$opt_cflags=$opt_cflags." -O3";
    }
    ($ver_marjor,$ver_minor,$rev) = get_gcc_ver();
    if(($ver_major == 4) && ($ver_minor == 4)) {
	print "\nWarning: gcc 4.4.x known to have bugs in -ftree-vectorize setting -fno-tree-vectorize\n";
	$opt_cflags = $opt_cflags . " -fno-tree-vectorize ";
    }
  }

  # run checks.
  if (!(check_make() && check_gcc() && check_cppunit())) {
    print "$0: failed.\n";
    exit(1);
  }

  # complain if the with-prebuilt-lib isnt found
  if ($opt_with_prebuilt_lib and (! -d $opt_with_prebuilt_lib)) {
    print "$0: warning: --with-prebuilt-lib directory '$opt_with_prebuilt_lib' not found'\n";
  }

  #
  print "writing '$M2_file'...\n";
  open(M2,">$M2_temp");

  # some boilerplate text...
  print M2 "#
# Makefile.config -- This was generated by './configure'. Do not edit!
#
# ",join(" ",$0,@ORIG_ARGV),"
#
# generated on ",`date`,"
#
";

  #
  if ($opt_arch ne "") {
    # expand the arch list to a set of flags.
    if ($opt_cpucomsys!~/-(darwin|panther|tiger|leopard)$/) {
      print "$0: warning: using '--arch' on a non-darwin system.\n";
    }
    $arch_flags=join(" ",map({"-arch $_"} split(/,/,$opt_arch)));
    if ($arch_flags) {
      gen_m2_set("sdk_arch_flags",$arch_flags);
      # @todo: Here we assume '--arch' implies OSX.
      gen_m2_set("sdk_osx_lflags","-Wl,-search_paths_first");
    }
  }
  # Check for Darwin flags
  $uname = `uname`;
  chomp $uname;
  if ($uname =~ /Darwin/) {
      $opt_cflags=$opt_cflags." -stdlib=libstdc++"
  }
  if ($opt_cflags ne "") {
    gen_m2_set("sdk_cpp_cflags",$opt_cflags);
    # at some point we may need to make a distinction between
    # C and CPP flags - here we do not. But we do make a copy
    # as the post build makefile system will add c++ specific
    # flags
    gen_m2_set("sdk_c_cflags",$opt_cflags);
  }

  if ($opt_lflags ne "") {
    gen_m2_set("sdk_cpp_lflags",$opt_lflags);
  }
  #
  # --with-output-tmp has extra stuff tacked on to make somewhat unique.
  # --with-output-tmp-path allows us to specify the complete path
  if (defined($opt_with_output_tmp)||defined($opt_with_output_tmp_path)) {
    #
    $var_tmp=$opt_with_output_tmp||$ENV{TMPDIR}||"/var/tmp";
    $var_tmp.="/".($ENV{USER}||"unknown");
    if (defined($ENV{CPUCOMSYS})) {
      # delay the expansion
      $var_tmp.='/${CPUCOMSYS}';
    }
    $var_tmp.="/output";
    #
    if (defined($opt_with_output_tmp_path)) {
      $var_tmp=$opt_with_output_tmp_path;
    }
    #
    if (!$opt_with_output_lib) {
      $opt_with_output_lib="$var_tmp/lib";
    }
    if (!$opt_with_output_obj) {
      $opt_with_output_obj="$var_tmp/obj";
    }
    # expand the cpucomsys in the path...
    $var_tmp=~s/\$\{CPUCOMSYS\}/$opt_cpucomsys/;
    # ... and see if we should warn about stale libs
    if (-d $var_tmp) {
      push(@WARNINGS,"$0: warning: '$var_tmp' already exists.\n");
      push(@WARNINGS,"$0: warning: Be sure to run 'make clean'.\n");
    }
  }

  print M2 "
# You may wish to customize your output dir if you are building
# on many machines.  Uncomment the following or use it as an example.
# ifndef sdk_output_top
#   export sdk_output_top:=\${sdk_root}/output/\$(shell hostname -s)-\${CPUCOMSYS}
# endif
";

  print M2 "
# You can change this to adjust the coverity stream you commit to:
# See: http://infowiki.ev.affymetrix.com/index.php/APT:_Coverity
# The default is:
#   export COVERITY_STREAM:=apt-\${USER}

";
  #
  gen_m2_set("sdk_output_top",$opt_with_output);
  gen_m2_set("sdk_output_lib",$opt_with_output_lib);
  gen_m2_set("sdk_output_obj",$opt_with_output_obj);
  #
  gen_m2_set("with_prebuilt_top",$opt_with_prebuilt_lib);
  #
  print M2 "#\n";
  gen_m2_set("with_hdf5_top",$opt_with_hdf5);
  gen_m2_set("with_zlib_top",$opt_with_zlib);
  gen_m2_set("with_pcre_top",$opt_with_pcre);

  # might not have these paths.
  if ($opt_prefix ne "") {
    gen_m2_set("install_prefix",$opt_prefix);
    if ($opt_exec_prefix ne "") {
      gen_m2_set("install_exec_prefix",$opt_exec_prefix);
    }
  }
  #
  gen_m2_set("with_cppunit",$opt_with_cppunit);

  gen_m2_set("with_cppunit_xml",$opt_with_cppunit_xml);

  #
  gen_m2_set("regression_data",$opt_regression_data);
  # set symbolic link
  $reg_data_link="./regression-data/data";
  system("[ -d $reg_data_link ] && rm $reg_data_link ; ln -sf $opt_regression_data $reg_data_link");
  if ( $? == -1) {
    print "ERROR: Failed to create regression data link: $!\n";
    exit 1;
  }
  system("[ -h $reg_data_link -a -e $reg_data_link ]");
  if (($? == -1 ||  ($? >> 8)  != 0) && $opt_with_cppunit == 1) {
    print "*** WARNING: BAD REGRESSION DATA LINK ***\n";
  }

  #
  gen_m2_set("sdk_output_test", $opt_with_output_test);
  #
  print M2 "# done

# Local Variables:
# mode: makefile
# End:
";

  # Made it this far without and error, replace the old file.
  close(M2)||die "unable to close";
  rename($M2_temp,$M2_file)||die "unable to rename";
  print "writing '$M2_file'... done.\n";

  # dump the warning later for pretty output.
  foreach $w (@WARNINGS) {
    print $w;
  }

  # post-config actions
  if (($opt_build==1)||($opt_install==1)) {
    system("make -f Makefile2 clean");
    system("make -f Makefile2 build");
    if ($opt_install==1) {
      system("make -f Makefile2 install");
    }
  }
}

sub gen_m2_set {
  my($var)=shift||die "no varname given!";
  my($val)=shift;

  if (defined($val)) {
    print M2 "$var:=$val\n";
  }
  else {
    print M2 "# '$var' not defined\n"
  }
}

sub usage {
  print "
   configure --- create a 'Makefile.config' for the affy sdk.

   -h     = this help message.
   -v     = be verbose in output

  --cflags = flags for the compiler.
  --lflags = flags for the linker

   --prefix      = The path to which our files will be installed.
   --exec-prefix = Where arch specfic files should go.

   --debug = build binaries with debug information
   --without-cppunit = do not build check targets which depend on CPPUNIT
   --with-cppunit-xml = generate JUnit xml output files from tests
   --arch = architecture flags for cross compiling or building fat binaries
            (currently only for darwin systems)
            example: --arch=i386,ppc,ppc64,x86_64

   --with-output path = Where to place working output (libraries and object)
                   (defaults to './output')

   --with-output-tmp = Only relocate the temporary lib and obj files.
          (If no directory given, use '/var/tmp')

   --with-output-test = Relocate the generated test files created during regression.
          (50GB of test data will be created for full regression.)

   --with-prebuilt-lib = Directory to search for prebuilt libraries.
          (The local output-lib dir is searched first, then this one.)

   --regression-data = Location of regression test data

EXAMPLES:
   To have the tools installed just on the local machine, try:

      configure  --prefix=/usr/local/apt-NON-OFFICIAL-RELEASE

   To install on some NFS share with multiple archs, try:

      configure  --prefix=/nfs/volume/apt-NON-OFFICIAL-RELEASE  \\
         --exec-prefix='/nfs/volume/apt-NON-OFFICIAL-RELEASE/\$(CPUCOMSYS)'

   Note the quotes around the string supplied to exec-prefix.  This will prevent
   the expansion by the shell and have the makefile expand \$(CPUCOMSYS)
   during the build and install process.

NOTE: We recommend using the CPUCOMSYS variable.

   The file 'Makefile.site' is read after 'Makefile.config'.
   You may want to put options specific to your site there.

REQUIREMENTS:

   To build APT you will need GNU Make 3.81+ and a recent version of g++.

OTHER:

   See the BUILD.html document for more information.
   
   On OS-X use -D_GLIBCXX_DEBUG to enable bounds checking on STL
";
  exit(shift);
}

##########

#
sub check_make {
  print "checking make...";
  # capture stdout and stderr...
  $rv=open(OUT,"(make --version 2>&1)|");

  if (!$rv) {
    print "failed. (not found)\n";
    return 0;
  }

  while ($l=<OUT>) {
    print ".";
    if ($l=~m/GNU Make\s+(\d+)\.(\d+)/ || $l=~m/GNU Make version\s+(\d+)\.(\d+)/) {
      $ver_major=$1;
      $ver_minor=$2;
    }
  }

  # This one is know to work.
  if (($ver_major==3) && ($ver_minor>=81)) {
    print "ok.\n";
    return 1;
  }
  # I think some vendors have patched 3.80 to work. -- harley.
  if (($ver_major==3) && ($ver_minor==80)) {
    print "(might not work unless you have a patched make) ok.\n";
    return 1;
  }
  if (defined($ver_major)) {
    print "This version of make ($ver_major.$ver_major) will not work.\n";
    return 0;
  }
  # Unable to figure out version
  if ($ver_major eq "") {
    print "failed. (couldn't determine version)\n";
    return 0;
  }
  #
  print "failed. (need GNU make 3.81 or later, found $ver_major.$ver_minor)\n";
  return 0;
}

sub get_gcc_ver {
  $rv=open(OUT,"(gcc --version 2>&1)|");

  if (!$rv) {
    print "failed. (not found)\n";
    return 0;
  }

  while ($l=<OUT>) {
    print ".";
    if ($l=~m/\(GCC\)\s+(\d+)\.(\d+)(\.(\d+))?/) {
      $ver_major=$1;
      $ver_minor=$2;
      $ver_rev=$4;
    }
  }
  return ($ver_major, $ver_minor, $ver_rev);
}

#
sub check_gcc {
  print "checking gcc...";
  ($ver_marjor,$ver_minor,$rev) = get_gcc_ver();
  
  $uname = `uname`;
  chomp $uname;
  $darwin = 1 if $uname =~ /Darwin/;

  if ($ver_major eq "") {
    print "failed. (no version)\n";
    return 0;
  }
  if (($ver_major==4) && ($ver_minor==0) && ($ver_rev==1)) {
    if(!$darwin) {
      print "failed.  (gcc 4.0.1 has problems with floats and unions)\n";
      return 0;
    }
  }

  # default is ok
  print "ok.\n";
  return 1;
}

sub check_cppunit {
  print "checking cppunit...";

  # asked to skip?
  if ($opt_with_cppunit eq "0") {
    print "without.\n";
    return 1;
  }

  $rv=open(OUT,"(cppunit-config --version 2>&1)|");

  if ($rv==0) {
    print "failed. (not found. Try '--without-cppunit')\n";
    return 0;
  }

  while ($l=<OUT>) {
    print ".";
    if ($l=~m/^((\d+)\.(\d+)(\.(\d+)))?/) {
      $ver_major=$2;
      $ver_minor=$3;
      $ver_rev=$5;
    }
  }
  if ($ver_major==1) {
    # default is ok
    print "ok.\n";
    return 1;
  }
  #
  print "failed. (bad version)\n";
  return 0;
}

# Local Variables:
# mode: perl
# End:
