#
# cvs:affy/sdk/dox/Makefile ---
#
# $Id:
#

### programs
# define some vars for programs we use.
# this allows us to set the full path should we need it.

DOXYGEN_EXE:=doxygen
LINKLINT_EXE:=./linklint

# Included files
#
# Makefile.defs
#    contains defaults and definitions which will be used
#    for later expansion by "$(call)".
#    It also includes "Makefile.config" and "Makefile.site".
# Makefile.config
#    Contain a short list of vars. (as generated by "./configure")
# Makefile.site
#    an optional file for use by other sites.
#    it will not be updated or replaced by us.

# Default target
#
build: dox

# This should always be set before including the defs file.
sdk_root:=..
include ${sdk_root}/Makefile.defs

# Need different sed options for os x
#
ifeq ($(shell uname), Darwin)
  SED:=sed -i ""
else
  SED:=sed -i
endif

##########
#
# Documentation.
#

## To update the docs
## - make
## - make dox
## - make check_doc


# Build doxygen documentation
#
dox: \
	update_doc_options \
	dox_check_versions \
	dox_build \
	static_doc
.PHONY: dox 

# Set Doxyfile
#
DOXYFILE:=./Doxyfile

# Update the options section in the doxygen manual with online help from APT binaries
# - generates *.help.txt files correstponding to applications.
#
update_doc_options:
	${sdk_root}/dox/update-manual-options.sh
.PHONY: update_doc_options

# do we have needed apps installed?
dox_check_versions: dox_check_version_doxygen

# dot/dvips/latex no longer in use.
#
#awilli@pavia:/var/tmp/nfs/bioinformatics/apt/nightly-build/i386-intel-linux.pavia/affy/sdk$ doxygen --version
#	1.7.1

# we expect bash to be running for the array ops...
dox_check_version_doxygen:
	@echo "Checking for 'doxygen'..."
	VER=($$(${DOXYGEN_EXE} --version 2>&1 )) && [ "$${VER[0]}" = "1.7.1" ]

# build doxygen documents
#
dox_build:
	# Set version in Doxyfile
	cp ${DOXYFILE} ${DOXYFILE}.old
	${SED} "s/NON-OFFICIAL-RELEASE/${DOC_APT_VERSION}/" ${DOXYFILE}
	# Run doxygen
	if [ -d "${sdk_root}/dox/html" ]; then rm -rf "${sdk_root}/dox/html"; fi
	(cd .. && ${DOXYGEN_EXE} ./dox/${DOXYFILE} 2>&1 | tee doxygen.out)
	# Sort the listing on the "Related Files" page
	perl -i -ne 'chomp; if(/^\<li\>/){push @items, $$_;}elsif(/^\<\/ul\>/){foreach(@items){if(/\"\>(.*)\<\/a\>/){$$h{$$1} = $$_;}} @k = sort keys %h; foreach(@k){ print $$h{$$_} . "\n";}}elsif(/\S/){print "$$_\n";};' ${sdk_root}/dox/html/pages.html
	# Add GCOS/AGCC File Format Docs
	[ -d ${sdk_root}/dox/html/gcos-agcc ] || ( [ ! -d ${sdk_root}/dox/html/gcos-agcc ] && mkdir ${sdk_root}/dox/html/gcos-agcc )
	rsync -C -arv -L --exclude=build.BAT --exclude=build.xml --exclude=.cvsignore --exclude=CVS --delete ${sdk_root}/file_formats/ ${sdk_root}/dox/html/gcos-agcc/
	# Reset Doxyfile
	mv ${DOXYFILE}.old ${DOXYFILE}
	# copy apt2 files if present
	rsync -av -L ${sdk_root}/dox/apt2/ ${sdk_root}/dox/html/
	#for f in $(ls "${sdk_root}/dox/apt2"); do echo "Copying ${sdk_root}/dox/apt2/${f} to ${sdk_root}/dox/html"; cp "${sdk_root}/dox/apt2/${f}" "${sdk_root}/dox/html"; done
	#if [ -d "${sdk_root}/dox/apt2" ]; then cp "${sdk_root}"/dox/apt2/* "${sdk_root}/dox/html"; fi

# copy documents to web
#

DOX_WEB_DIR:=/nfs/bioinformatics/apt/nightly-build/full-src/affy/sdk
dox_web_install:
	rsync --exclude=output --exclude=test-generated -arv --delete --delete-after \
	  ${sdk_root}/dox/html/ $(DOX_WEB_DIR)/dox/html/ 2>&1 | tee rsync_web_install1.out
	rsync --exclude=output --exclude=test-generated -arv --delete --delete-after \
	  ${sdk_root}/apt/doc/ $(DOX_WEB_DIR)/apt/doc/ 2>&1 | tee rsync_web_install2.out

# copy over static docs - used by binary builds and windows installer
static_doc:
	./doc-files.sh
	./doc-find-section-conflicts.sh
.PHONY: static_doc

check_doc_conflicts:
	${sdk_root}/dox/doc-find-section-conflicts.sh

# Check docs for broken links (look in ./apt/doc-status/index.html)
check_doc:
	${LINKLINT_EXE} -root ${sdk_root}/apt/doc -doc ${sdk_root}/apt/doc-status /@
.PHONY: check_doc


# Clean dox generated files and files used in documentation process
#
clean_doc:
	-rm -rf ${sdk_root}/apt/doc
	-rm -rf ${sdk_root}/dox/html
	find ${sdk_root} -name '*.help.txt' -exec rm {} \;


